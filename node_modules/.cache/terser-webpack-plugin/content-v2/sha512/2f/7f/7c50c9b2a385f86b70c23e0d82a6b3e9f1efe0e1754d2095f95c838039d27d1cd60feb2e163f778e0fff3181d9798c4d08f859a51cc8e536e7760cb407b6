{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{201:function(v,e,s){v.exports=s.p+\"assets/img/etl.666295e1.png\"},202:function(v,e,s){v.exports=s.p+\"assets/img/shucangfenceng.83dc837e.png\"},203:function(v,e,s){v.exports=s.p+\"assets/img/dm.9fce0583.png\"},204:function(v,e,s){v.exports=s.p+\"assets/img/hive1.c1404c02.png\"},205:function(v,e,s){v.exports=s.p+\"assets/img/hive_jiagou.680e7908.png\"},206:function(v,e,s){v.exports=s.p+\"assets/img/hive_hadoop.3d42d1ea.png\"},207:function(v,e,s){v.exports=s.p+\"assets/img/hive_sql.47201f34.png\"},222:function(v,e,s){\"use strict\";s.r(e);var a=s(28),t=Object(a.a)({},(function(){var v=this,e=v.$createElement,a=v._self._c||e;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":v.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"hive\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hive\"}},[v._v(\"#\")]),v._v(\" Hive\")]),v._v(\" \"),a(\"h2\",{attrs:{id:\"什么是数仓\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是数仓\"}},[v._v(\"#\")]),v._v(\" 什么是数仓\")]),v._v(\" \"),a(\"h3\",{attrs:{id:\"基本概念\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#基本概念\"}},[v._v(\"#\")]),v._v(\" 基本概念\")]),v._v(\" \"),a(\"p\",[v._v(\"英文名称为Data Warehouse，可简写为 DW 或 DWH。数据仓库的目的是构建面向分析的集成化数据环境，为企业提供决策支持（Decision Support）。它出于分析性报告和决策支持的目的而创建。\")]),v._v(\" \"),a(\"p\",[v._v('数据仓库本身并不“生产”任何数据，同时自身也不需要“消费”任何数据，数据来源于外界，并且开放给外部应用，这也是为什么叫“仓库\"，而不叫”工厂”的原因。')]),v._v(\" \"),a(\"h3\",{attrs:{id:\"主要特征\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#主要特征\"}},[v._v(\"#\")]),v._v(\" 主要特征\")]),v._v(\" \"),a(\"p\",[v._v(\"数据仓库是面向主题的（Subject-Oriented）、集成的（Integrated）、非易失的（Non-Volatile）和时变的（Time-Variant）数据集合，用以支持管理决策。\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[a(\"strong\",[v._v(\"面向主题\")])]),v._v(\" \"),a(\"p\",[v._v(\"面向主题性表示了数据仓库中数据组织的基本原则，数据仓库中的所有数据都是围绕着某一主题组织的。\\n确定主题以后，需要确定主题应该包含的数据。\\n不同的主题之间可能会出现相互重叠的信息。\\n主题在数据仓库中可以用多维数据库方式进行存储。\\n主题的划分中，必须保证每一个主题的独立性。\")]),v._v(\" \"),a(\"p\",[v._v(\"一个主题领域的表来源于多个操作型应用（如：客户主题，来源于：定单处理、应收帐目、应付帐目…）；\")]),v._v(\" \"),a(\"p\",[v._v(\"典型的主题领域：客户；产品；交易；帐目；\\n主题领域以一组相关的表来具体实现；\\n相关的表通过公共的键码联系起来（如：顾客标识号Customer ID）；\\n每个键码都有时间元素（从日期到日期；每月累积；单独日期…）；\\n主题内数据可以存储在不同介质上（综合级，细节级，多粒度）。\")])]),v._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[v._v(\"集成性\")])]),v._v(\" \"),a(\"p\",[v._v(\"通过对分散、独立、异构的数据库数据进行抽取、清理、转换和汇总便得到了数据仓库的数据，这样保证了数据仓库内的数据关于整个企业的一性。\")]),v._v(\" \"),a(\"p\",[v._v(\"数据仓库中的综合数据不能从原有的数据库系统直接得到。因此在数据进入数据仓库之前，必然要经过统一与综合，这一步是数据仓库建设中最关键、最复杂的一步，所要完成的工作有：\")]),v._v(\" \"),a(\"ol\",[a(\"li\",[a(\"p\",[v._v(\"要统一源数据中所有矛盾之处，如字段的同名异义、异名同义、单位不统一、字长不一致，等等。\")])]),v._v(\" \"),a(\"li\",[a(\"p\",[v._v(\"进行数据综合和计算。数据仓库中的数据综合工作可以在从原有数据库抽取数据时生成，但许多是 在数据仓库内部生成的，即进入数据仓库以后进行综合生成的。\")])])]),v._v(\" \"),a(\"p\",[v._v(\"下图说明一个保险公司综合数据的简单处理过程，其中数据仓库中与“保险” 主题有关的数据来自于多个不同的操作型系统。这些系统内部数据的命名可能不同，数据格式也可能不同。把不同来源的数据存 储到数据仓库之前需要去除这些不一致。\")]),v._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:s(201),alt:\"\"}})]),v._v(\" \"),a(\"blockquote\",[a(\"p\",[v._v('ETL分别代表：提取extraction、转换transformation、加载load。其中提取过程表示操作型数据库搜集指定数据，转换过程表示将数据转化为指定格式并进行数据清洗保证数据质量，加载过程表示将转换过后满足指定格式的数据加载进数据仓库。数据仓库会周期不断地从源数据库提取清洗好了的数据，因此也被称为\"目标系统\"；')])])]),v._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[v._v(\"非易失性（不可更新性）\")])]),v._v(\" \"),a(\"p\",[v._v(\"操作型数据库主要服务于日常的业务操作，使得数据库需要不断地对数据实时更新，以便迅速获得当前最新数据，不至于影响正常的业务运作。在数据仓库中只要保存过去的业务数据，不需要每一笔业务都实时更新数据仓库，而是根据商业需要每隔一段时间把一批较新的数据导入数据仓库。\")]),v._v(\" \"),a(\"p\",[v._v(\"数据仓库的数据反映的是一段相当长的时间内历史数据的内容，是不同时点的数据库快照的集合，以及基于这些快照进行统计、综合和重组的导出数据。\")]),v._v(\" \"),a(\"p\",[v._v(\"数据非易失性主要是针对应用而言。数据仓库的用户对数据的操作大多是数据查询或比较复杂的挖掘，一旦数据进入数据仓库以后，一般情况下被较长时间保留。数据仓库中一般有大量的查询操作，但修改和删除操作很少。因此，数据经加工和集成进入数据仓库后是极少更新的，通常只需要定期的加载和更新。\")])]),v._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[v._v(\"时变性\")])]),v._v(\" \"),a(\"p\",[v._v(\"数据仓库包含各种粒度的历史数据。数据仓库中的数据可能与某个特定日期、星期、月份、季度或者年份有关。数据仓库的目的是通过分析企业过去一段时间业务的经营状况，挖掘其中隐藏的模式。虽然数据仓库的用户不能修改数据，但并不是说数据仓库的数据是永远不变的。分析的结果只能反映过去的情况，当业务变化后，挖掘出的模式会失去时效性。因此数据仓库的数据需要更新，以适应决策的需要。\")]),v._v(\" \"),a(\"p\",[v._v(\"从这个角度讲，数据仓库建设是一个项目，更是一个过程 。数据仓库的数据随时间的变化表现在以下几个方面。\")]),v._v(\" \"),a(\"ol\",[a(\"li\",[a(\"p\",[v._v(\"数据仓库的数据时限一般要远远长于操作型数据的数据时限。\")])]),v._v(\" \"),a(\"li\",[a(\"p\",[v._v(\"操作型系统存储的是当前数据，而数据仓库中的数据是历史数据。\")])]),v._v(\" \"),a(\"li\",[a(\"p\",[v._v(\"数据仓库中的数据是按照时间顺序追加的，它们都带有时间属性。\")])])])])]),v._v(\" \"),a(\"h3\",{attrs:{id:\"数据库与数据仓库的区别\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据库与数据仓库的区别\"}},[v._v(\"#\")]),v._v(\" 数据库与数据仓库的区别\")]),v._v(\" \"),a(\"p\",[v._v(\"数据库与数据仓库的区别实际讲的是 OLTP 与 OLAP 的区别。\")]),v._v(\" \"),a(\"p\",[v._v(\"操作型处理，叫联机事务处理 OLTP（On-Line Transaction Processing，），也可以称面向交易的处理系统，它是针对具体业务在数据库联机的日常操作，通常对少数记录进行查询、修改。用户较为关心操作的响应时间、数据的安全性、完整性和并发支持的用户数等问题。传统的数据库系统作为数据管理的主要手段，主要用于操作型处理。\")]),v._v(\" \"),a(\"p\",[v._v(\"分析型处理，叫联机分析处理 OLAP（On-Line Analytical Processing）一般针对某些主题的历史数据进行分析，支持管理决策\")]),v._v(\" \"),a(\"p\",[v._v(\"首先要明白，数据仓库的出现，并不是要取代数据库。\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[v._v(\"数据库是面向事务的设计，数据仓库是面向主题设计的。\")])]),v._v(\" \"),a(\"li\",[a(\"p\",[v._v(\"数据库一般存储业务数据，数据仓库存储的一般是历史数据。\")])]),v._v(\" \"),a(\"li\",[a(\"p\",[v._v(\"数据库设计是尽量避免冗余，一般针对某一业务应用进行设计，比如一张简单的User表，记录用户名、密码等简单数据即可，符合业务应用，但是不符合分析。数据仓库在设计是有意引入冗余，依照分析需求，分析维度、分析指标进行设计。\")])]),v._v(\" \"),a(\"li\",[a(\"p\",[v._v(\"数据库是为\"),a(\"strong\",[v._v(\"捕获\")]),v._v(\"数据而设计，数据仓库是为\"),a(\"strong\",[v._v(\"分析\")]),v._v(\"数据而设计。\")])])]),v._v(\" \"),a(\"p\",[v._v(\"以银行业务为例。数据库是事务系统的数据平台，客户在银行做的每笔交易都会写入数据库，被记录下来，这里，可以简单地理解为用数据库记账。数据仓库是分析系统的数据平台，它从事务系统获取数据，并做汇总、加工，为决策者提供决策的依据。比如，某银行某分行一个月发生多少交易，该分行当前存款余额是多少。如果存款又多，消费交易又多，那么该地区就有必要设立ATM了。\")]),v._v(\" \"),a(\"p\",[v._v(\"显然，银行的交易量是巨大的，通常以百万甚至千万次来计算。事务系统是实时的，这就要求时效性，客户存一笔钱需要几十秒是无法忍受的，这就要求数据库只能存储很短一段时间的数据。而分析系统是事后的，它要提供关注时间段内所有的有效数据。这些数据是海量的，汇总计算起来也要慢一些，但是，只要能够提供有效的分析数据就达到目的了。\")]),v._v(\" \"),a(\"p\",[a(\"strong\",[v._v(\"数据仓库，是在数据库已经大量存在的情况下，为了进一步挖掘数据资源、为了决策需要而产生的，它决不是所谓的\")]),v._v(\"“\"),a(\"strong\",[v._v(\"大型数据库\")]),v._v(\"”。\")]),v._v(\" \"),a(\"h3\",{attrs:{id:\"数仓的分层架构\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数仓的分层架构\"}},[v._v(\"#\")]),v._v(\" 数仓的分层架构\")]),v._v(\" \"),a(\"p\",[v._v(\"按照数据流入流出的过程，数据仓库架构可分为三层——源数据、数据仓库、数据应用。\")]),v._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:s(202),alt:\"\"}})]),v._v(\" \"),a(\"p\",[v._v(\"数据仓库的数据来源于不同的源数据，并提供多样的数据应用，数据自下而上流入数据仓库后向上层开放应用，而数据仓库只是中间集成化数据管理的一个平台。\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[v._v(\"源数据层（ODS） ：此层数据无任何更改，直接沿用外围系统数据结构和数据，不对外开放；为临时存储层，是接口数据的临时存储区域，为后一步的数据处理做准备。\")]),v._v(\" \"),a(\"li\",[v._v(\"数据仓库层（DW） ：也称为细节层，DW层的数据应该是一致的、准确的、干净的数据，即对源系统数据进行了清洗（去除了杂质）后的数据。\")]),v._v(\" \"),a(\"li\",[v._v(\"数据应用层（DA或APP） ：前端应用直接读取的数据源；根据报表、专题分析需求而计算生成的数据。\")])]),v._v(\" \"),a(\"p\",[v._v(\"数据仓库从各数据源获取数据及在数据仓库内的数据转换和流动都可以认为是ETL（抽取Extra, 转化 Transfer, 装载Load）的过程，ETL是数据仓库的流水线，也可以认为是数据仓库的血液，它维系着数据仓库中数据的新陈代谢，而数据仓库日常的管理和维护工作的大部分精力就是保持ETL的正常和稳定。\")]),v._v(\" \"),a(\"h4\",{attrs:{id:\"为什么要对数据仓库分层？\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么要对数据仓库分层？\"}},[v._v(\"#\")]),v._v(\" 为什么要对数据仓库分层？\")]),v._v(\" \"),a(\"p\",[v._v(\"用空间换时间，通过大量的预处理来提升应用系统的用户体验（效率），因此数据仓库会存在大量冗余的数据；不分层的话，如果源业务系统的业务规则发生变化将会影响整个数据清洗过程，工作量巨大。\")]),v._v(\" \"),a(\"p\",[v._v(\"通过数据分层管理可以简化数据清洗的过程，因为把原来一步的工作分到了多个步骤去完成，相当于把一个复杂的工作拆成了多个简单的工作，把一个大的黑盒变成了一个白盒，每一层的处理逻辑都相对简单和容易理解，这样我们比较容易保证每一个步骤的正确性，当数据发生错误的时候，往往我们只需要局部调整某个步骤即可。\")]),v._v(\" \"),a(\"h3\",{attrs:{id:\"数仓的元数据管理\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数仓的元数据管理\"}},[v._v(\"#\")]),v._v(\" 数仓的元数据管理\")]),v._v(\" \"),a(\"p\",[v._v(\"元数据（Meta Date），主要记录数据仓库中模型的定义、各层级间的映射关系、监控数据仓库的数据状态及ETL的任务运行状态。一般会通过元数据资料库（Metadata Repository）来统一地存储和管理元数据，其主要目的是使数据仓库的设计、部署、操作和管理能达成协同和一致。\")]),v._v(\" \"),a(\"p\",[v._v(\"元数据是数据仓库管理系统的重要组成部分，元数据管理是企业级数据仓库中的关键组件，贯穿数据仓库构建的整个过程，直接影响着数据仓库的构建、使用和维护。\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[v._v(\"构建数据仓库的主要步骤之一是ETL。这时元数据将发挥重要的作用，它定义了源数据系统到数据仓库的映射、数据转换的规则、数据仓库的逻辑结构、数据更新的规则、数据导入历史记录以及装载周期等相关内容。数据抽取和转换的专家以及数据仓库管理员正是通过元数据高效地构建数据仓库。\")])]),v._v(\" \"),a(\"li\",[a(\"p\",[v._v(\"用户在使用数据仓库时，通过元数据访问数据，明确数据项的含义以及定制报表。\")])]),v._v(\" \"),a(\"li\",[a(\"p\",[v._v(\"数据仓库的规模及其复杂性离不开正确的元数据管理，包括增加或移除外部数据源，改变数据清洗方法，控制出错的查询以及安排备份等。\")])])]),v._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:s(203),alt:\"\"}})]),v._v(\" \"),a(\"p\",[v._v(\"元数据可分为\"),a(\"strong\",[v._v(\"技术元数据\")]),v._v(\"和\"),a(\"strong\",[v._v(\"业务元数据\")]),v._v(\"。\")]),v._v(\" \"),a(\"p\",[v._v(\"技术元数据为开发和管理数据仓库的IT 人员使用，它描述了与数据仓库开发、管理和维护相关的数据，包括数据源信息、数据转换描述、数据仓库模型、数据清洗与更新规则、数据映射和访问权限等。\")]),v._v(\" \"),a(\"p\",[v._v(\"而业务元数据为管理层和业务分析人员服务，从业务角度描述数 据，包括商务术语、数据仓库中有什么数据、数据的位置和数据的可用性等，帮助业务人员更好地理解数据仓库中哪些数据是可用的以及如何使用。\")]),v._v(\" \"),a(\"p\",[v._v(\"由上可见，元数据不仅定义了数据仓库中数据的模式、来源、抽取和转换规则等，而且是整个数据仓库系统运行的基础，元数据把数据仓库系统中各个松散的组件联系起来，组成了一个有机的整体。\")]),v._v(\" \"),a(\"h2\",{attrs:{id:\"hive-的基本概念\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hive-的基本概念\"}},[v._v(\"#\")]),v._v(\" \"),a(\"strong\",[v._v(\"Hive\")]),v._v(\" 的基本概念\")]),v._v(\" \"),a(\"h3\",{attrs:{id:\"hive-简介\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hive-简介\"}},[v._v(\"#\")]),v._v(\" Hive 简介\")]),v._v(\" \"),a(\"h4\",{attrs:{id:\"什么是-hive-？\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是-hive-？\"}},[v._v(\"#\")]),v._v(\" 什么是 \"),a(\"strong\",[v._v(\"Hive\")]),v._v(\" ？\")]),v._v(\" \"),a(\"p\",[v._v(\"Hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供类SQL查询功能。\")]),v._v(\" \"),a(\"p\",[v._v(\"其本质是将SQL转换为MapReduce的任务进行运算，底层由HDFS来提供数据的存储，说白了hive可以 理解为一个将SQL转换为MapReduce的任务的工具，甚至更进一步可以说hive就是一个MapReduce的 客户端。\")]),v._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:s(204),alt:\"\"}})]),v._v(\" \"),a(\"h4\",{attrs:{id:\"为什么使用-hive-？\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么使用-hive-？\"}},[v._v(\"#\")]),v._v(\" 为什么使用 Hive ？\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[v._v(\"直接使用hadoop所面临的问题\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[v._v(\"人员学习成本太高\")]),v._v(\" \"),a(\"li\",[v._v(\"项目周期要求太短\")]),v._v(\" \"),a(\"li\",[v._v(\"MapReduce实现复杂查询逻辑开发难度太大\")])])]),v._v(\" \"),a(\"li\",[a(\"p\",[v._v(\"为什么要使用Hive\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[v._v(\"操作接口采用类SQL语法，提供快速开发的能力。\")]),v._v(\" \"),a(\"li\",[v._v(\"避免了去写MapReduce，减少开发人员的学习成本。\")]),v._v(\" \"),a(\"li\",[v._v(\"功能扩展很方便。\")])])])]),v._v(\" \"),a(\"h4\",{attrs:{id:\"hive的特点\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hive的特点\"}},[v._v(\"#\")]),v._v(\" Hive的特点\")]),v._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[v._v(\"可扩展\")]),v._v(\" \"),a(\"p\",[v._v(\"Hive 可以自由的扩展集群的规模，一般情况下不需要重启服务。\")])]),v._v(\" \"),a(\"li\",[a(\"p\",[v._v(\"延展性\")]),v._v(\" \"),a(\"p\",[v._v(\"Hive 支持用户自定义函数，用户可以根据自己的需求来实现自己的函数。\")])]),v._v(\" \"),a(\"li\",[a(\"p\",[v._v(\"容错\")]),v._v(\" \"),a(\"p\",[v._v(\"良好的容错性，节点出现问题SQL仍可完成执行。\")])])]),v._v(\" \"),a(\"h3\",{attrs:{id:\"hive架构\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hive架构\"}},[v._v(\"#\")]),v._v(\" Hive架构\")]),v._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:s(205),alt:\"\"}})]),v._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[v._v(\"用户接口\")]),v._v(\"： 包括CLI、JDBC/ODBC。其中，CLI(command line interface)为shell命令行；JDBC/ODBC是Hive的JAVA实现，与传统数据库JDBC类似；\")]),v._v(\" \"),a(\"li\",[a(\"strong\",[v._v(\"元数据存储\")]),v._v(\"： 通常是存储在关系数据库如mysql/derby中。Hive 将元数据存储在数据库中。Hive中的元数据包括表的名字，表的列和分区及其属性，表的属性（是否为外部表等），表的数据所在目录等。\")]),v._v(\" \"),a(\"li\",[a(\"strong\",[v._v(\"解释器、编译器、优化器、执行器\")]),v._v(\": 完成HQL 查询语句从词法分析、语法分析、编译、优化以及查询计划的生成。生成的查询计划存储在HDFS 中，并在随后有MapReduce 调用执行。\")])]),v._v(\" \"),a(\"p\",[a(\"strong\",[v._v(\"工作原理\")]),v._v(\"：\")]),v._v(\" \"),a(\"ol\",[a(\"li\",[a(\"p\",[v._v(\"用户创建数据库、表信息，存储在hive的元数据库中；\")])]),v._v(\" \"),a(\"li\",[a(\"p\",[v._v(\"向表中加载数据，元数据记录hdfs文件路径与表之间的映射关系；\")])]),v._v(\" \"),a(\"li\",[a(\"p\",[v._v(\"执行查询语句，首先经过解析器、编译器、优化器、执行器，将指令翻译成MapReduce，提交到Yarn上执行，最后将执行返回的结果输出到用户交互接口。\")])])]),v._v(\" \"),a(\"h3\",{attrs:{id:\"hive与hadoop的关系\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hive与hadoop的关系\"}},[v._v(\"#\")]),v._v(\" Hive与Hadoop的关系\")]),v._v(\" \"),a(\"p\",[v._v(\"Hive利用HDFS存储数据，利用MapReduce查询分析数据\")]),v._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:s(206),alt:\"\"}})]),v._v(\" \"),a(\"h3\",{attrs:{id:\"hive与传统数据库对比\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hive与传统数据库对比\"}},[v._v(\"#\")]),v._v(\" \"),a(\"strong\",[v._v(\"Hive\")]),v._v(\"与传统数据库对比\")]),v._v(\" \"),a(\"p\",[v._v(\"hive 用于海量数据的离线数据分析\")]),v._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:s(207),alt:\"\"}})]),v._v(\" \"),a(\"p\",[v._v(\"总结：hive具有sql数据库的外表，但应用场景完全不同，hive只适合用来做批量数据统计分析 。\")]),v._v(\" \"),a(\"h2\",{attrs:{id:\"hive安装和环境配置\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hive安装和环境配置\"}},[v._v(\"#\")]),v._v(\" Hive安装和环境配置\")]),v._v(\" \"),a(\"ol\",[a(\"li\",[v._v(\"手动安装：自行Google\")]),v._v(\" \"),a(\"li\",[v._v(\"CDH安装：自行Google\")])]),v._v(\" \"),a(\"h3\",{attrs:{id:\"hive的三种连接方式\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hive的三种连接方式\"}},[v._v(\"#\")]),v._v(\" Hive的三种连接方式\")]),v._v(\" \"),a(\"ol\",[a(\"li\",[a(\"p\",[v._v(\"第一种交互方式 \"),a(\"strong\",[v._v(\"bin/hive\")])]),v._v(\" \"),a(\"div\",{staticClass:\"language-shell extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-shell\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[v._v(\"#/bin/hive\")]),v._v(\"\\n\")])])]),a(\"p\",[v._v(\"通过hive shell来操作hive，但是至多只能存在一个hive shell，启动第二个会被阻塞，也就是说hive shell不支持并发操作。\")])]),v._v(\" \"),a(\"li\",[a(\"p\",[v._v(\"第二种交互方式 \"),a(\"strong\",[v._v(\"HiveServer2\")])]),v._v(\" \"),a(\"p\",[v._v(\"基于JDBC等协议：启动hiveserver2，通过jdbc协议可以访问hive，hiveserver2支持高并发。\")]),v._v(\" \"),a(\"p\",[v._v(\"简而言之，hiveserver2是Hive启动了一个server，客户端可以使用JDBC协议，通过IP+ Port的方式对其进行访问，达到并发访问的目的。\")]),v._v(\" \"),a(\"div\",{staticClass:\"language-shell extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-shell\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[v._v(\"#启动服务端（前台启动命令如下）\")]),v._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[v._v(\"#/bin/hive --service hiveserver2\")]),v._v(\"\\n\")])])]),a(\"p\",[v._v(\"在装了相同版本Hive的其他主机(启动hiveserver2的主机也可以)上启动beeline，可以连接到Hive的server上。执行命令：\")]),v._v(\" \"),a(\"div\",{staticClass:\"language-shell extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-shell\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[v._v(\"#/bin/beeline -u jdbc:hive2://node-00:10000\")]),v._v(\"\\n\")])])])]),v._v(\" \"),a(\"li\",[a(\"p\",[v._v(\"第三种交互方式：使用\"),a(\"strong\",[v._v(\"sql\")]),v._v(\"语句或者\"),a(\"strong\",[v._v(\"sql\")]),v._v(\"脚本进行交互\")]),v._v(\" \"),a(\"p\",[v._v(\"不进入hive的客户端直接执行hive的hql语句\")]),v._v(\" \"),a(\"div\",{staticClass:\"language-shell extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-shell\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[v._v('#/bin/hive -e \"create database if not exists mytest;\"')]),v._v(\"\\n\")])])]),a(\"p\",[v._v(\"或者我们可以将我们的hql语句写成一个sql脚本然后执行\")]),v._v(\" \"),a(\"div\",{staticClass:\"language-shell extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-shell\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[v._v(\"#vim hive.sql\")]),v._v(\"\\n\")])])]),a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"create\")]),v._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"database\")]),v._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"if\")]),v._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"not\")]),v._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"exists\")]),v._v(\" mytest\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\" \\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"use\")]),v._v(\" mytest\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\" \\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"create\")]),v._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"table\")]),v._v(\" stu\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"(\")]),v._v(\"id \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"int\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\",\")]),v._v(\"name string\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\n\")])])]),a(\"p\",[v._v(\"通过hive -f 来执行我们的sql脚本\")]),v._v(\" \"),a(\"div\",{staticClass:\"language-shell extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-shell\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[v._v(\"#/bin/hive -f hive.sql\")]),v._v(\"\\n\")])])])])]),v._v(\" \"),a(\"h2\",{attrs:{id:\"hive的基本操作\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hive的基本操作\"}},[v._v(\"#\")]),v._v(\" \"),a(\"strong\",[v._v(\"Hive\")]),v._v(\"的基本操作\")]),v._v(\" \"),a(\"h3\",{attrs:{id:\"创建数据库\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#创建数据库\"}},[v._v(\"#\")]),v._v(\" 创建数据库\")]),v._v(\" \"),a(\"div\",{staticClass:\"language-mysql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[v._v(\"create database if not exists myhive; \\nuse myhive;\\n\")])])])])}),[],!1,null,null,null);e.default=t.exports}}]);","extractedComments":[]}