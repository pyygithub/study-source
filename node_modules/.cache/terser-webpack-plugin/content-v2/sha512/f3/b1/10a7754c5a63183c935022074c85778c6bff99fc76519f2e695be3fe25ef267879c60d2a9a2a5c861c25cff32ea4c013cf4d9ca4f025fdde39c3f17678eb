{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{208:function(e,a,l){e.exports=l.p+\"assets/img/hbase.93edf177.png\"},209:function(e,a,l){e.exports=l.p+\"assets/img/hbase_table.b6db6e4e.png\"},223:function(e,a,l){\"use strict\";l.r(a);var t=l(28),s=Object(t.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"hbase\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hbase\"}},[e._v(\"#\")]),e._v(\" HBase\")]),e._v(\" \"),t(\"p\",[e._v(\"官网：http://hbase.apache.org\")]),e._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:l(208),alt:\"\"}})]),e._v(\" \"),t(\"p\",[e._v(\"HDFS：Hadoop分布式文件系统，适合非结构化数据的存储以及读取。\")]),e._v(\" \"),t(\"p\",[e._v(\"Apache HBase建立在HDFS之上的分布式、基于列存储的非关系型数据库；具有可靠、稳定、自动容错、多版本特性。\")]),e._v(\" \"),t(\"p\",[e._v(\"HBase实际上是Google BigTable项目的开源实现，它适合于海量的大规模（数十亿行、数百万列）的结构化数据存储。\")]),e._v(\" \"),t(\"p\",[e._v(\"当需要随机、实时读写访问大数据时,使用HBase。\")]),e._v(\" \"),t(\"h2\",{attrs:{id:\"特点\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#特点\"}},[e._v(\"#\")]),e._v(\" 特点\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"大：表可以有数十亿行、数百万列, 适合大规模的结构化数据存储。\")]),e._v(\" \"),t(\"li\",[e._v(\"面向列：面向列表（簇）的存储和权限控制，列（簇）独立检索。\")]),e._v(\" \"),t(\"li\",[e._v(\"结构稀疏：对于为空（null）的列，并不会占用存储空间，因此，表可以设计的非常稀疏。\")]),e._v(\" \"),t(\"li\",[e._v(\"无模式：每一行都有一个可以排序的主键和任意多的列，列可以根据需要动态的增加，同一张表中的不同的行可以有截然不同的列。\")]),e._v(\" \"),t(\"li\",[e._v(\"数据多版本：每个单元中的数据可以有多个版本，默认情况下，版本号自动分配，版本号就是单元格插入时的时间戳。\")]),e._v(\" \"),t(\"li\",[e._v(\"数据类型单一：HBase中的数据都是字符串（底层存储采用的是byte[]），没有类型。\")])]),e._v(\" \"),t(\"h2\",{attrs:{id:\"hbase-表结构\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hbase-表结构\"}},[e._v(\"#\")]),e._v(\" HBase 表结构\")]),e._v(\" \"),t(\"p\",[e._v(\"RDBMS：关系数据库管理系统特点\")]),e._v(\" \"),t(\"ol\",[t(\"li\",[e._v(\"固定格式\")]),e._v(\" \"),t(\"li\",[e._v(\"容量上限（分库分表）\")]),e._v(\" \"),t(\"li\",[e._v(\"业务需要事务（ACID）\")]),e._v(\" \"),t(\"li\",[e._v(\"丰富的 SQL 语法\")])]),e._v(\" \"),t(\"p\",[e._v(\"HBase 表结构\")]),e._v(\" \"),t(\"p\",[e._v(\"这里以一个公司员工表为案例来讲解，此表中包含员工基本信息（员工姓名、年龄），员工详细信息（工资、角色），以及时间戳。整体表结构如下：\")]),e._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:l(209),alt:\"\"}})]),e._v(\" \"),t(\"p\",[e._v(\"如上，每一行有一个RowKey用于唯一地标识和定位行，各行数据按RowKey的字典序排列。其中ImployeeBasicInfoCLF和DetailInfoCLF是两个列族，列族下又有多个具体列。（员工基本信息列族：姓名、年龄。详细信息列族：薪水、角色）\")]),e._v(\" \"),t(\"blockquote\",[t(\"p\",[e._v(\"注1：图中列族下面每一行中特定列中只画了最新版本的数据，实际上HBase最小存储单元为cell，图中每个单元格中其实有多个MVCC version版本的cell，Hbase的更新操作会带时间戳，对每个数据单元cell，可存取指定数量版本的cell，client端可以指定查询某时间点后的最新数据，也可以一次性得到cell的所有版本。）\")]),e._v(\" \"),t(\"p\",[e._v(\"注2：刚刚评论里有同学提到cell的概念，这里详细说一下，cell里可得道的信息包含: row、 column family、 column qualifier(列限定符)、timestamp、type6、MVCC version、value。其中每个cell 由 row、column family、column qualifier、timestamp,、and type唯一标识。\")]),e._v(\" \"),t(\"p\",[e._v(\"定位 cell： rowkey + 列簇 + 列 = cell\")])])])}),[],!1,null,null,null);a.default=s.exports}}]);","extractedComments":[]}