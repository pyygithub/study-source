(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{356:function(e,t,a){e.exports=a.p+"assets/img/docker_1.81794ad2.png"},357:function(e,t,a){e.exports=a.p+"assets/img/docker_youshi.bfc621ce.png"},358:function(e,t,a){e.exports=a.p+"assets/img/docker_youshi2.20496661.png"},359:function(e,t,a){e.exports=a.p+"assets/img/docker_namespce.93e879d1.png"},360:function(e,t,a){e.exports=a.p+"assets/img/docker_engine.d1ace127.png"},361:function(e,t,a){e.exports=a.p+"assets/img/docker_schedule.17746761.png"},362:function(e,t,a){e.exports=a.p+"assets/img/docker_feature.a07dec31.png"},363:function(e,t,a){e.exports=a.p+"assets/img/docker_fs1.5c6240a4.png"},364:function(e,t,a){e.exports=a.p+"assets/img/docker_fs2.7a89bc66.png"},365:function(e,t,a){e.exports=a.p+"assets/img/docker_fs3.d2ccefd8.png"},366:function(e,t,a){e.exports=a.p+"assets/img/docker_fs4.317c7017.png"},367:function(e,t,a){e.exports=a.p+"assets/img/docker_fs5.7060d626.png"},368:function(e,t,a){e.exports=a.p+"assets/img/docker_fs6.66bf41b9.png"},369:function(e,t,a){e.exports=a.p+"assets/img/docker_life.cf3457c6.png"},370:function(e,t,a){e.exports=a.p+"assets/img/images-mac-example-nginx.d313e45f.png"},371:function(e,t,a){e.exports=a.p+"assets/img/images-create-nginx-docker.ee39987b.png"},372:function(e,t,a){e.exports=a.p+"assets/img/dockerfile1.4016fe13.png"},373:function(e,t,a){e.exports=a.p+"assets/img/dockerfile2.401306c4.png"},500:function(e,t,a){"use strict";a.r(t);var s=a(19),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[e._v("#")]),e._v(" Docker")]),e._v(" "),s("h2",{attrs:{id:"第-1-章-容器技术的由来"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第-1-章-容器技术的由来"}},[e._v("#")]),e._v(" 第 1 章 容器技术的由来")]),e._v(" "),s("h3",{attrs:{id:"_1-1-容器概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-容器概述"}},[e._v("#")]),e._v(" 1.1 容器概述")]),e._v(" "),s("p",[e._v("容器是一种基础工具。泛指任何可以用于容纳其它物品的工具，可以部分或完全封闭，被用于容纳、储存、运输物品。物体可以被放置在容器中，而容器则可以保护内容物。")]),e._v(" "),s("p",[e._v("容器的类型：瓶、罐、箱、篮、桶、瓮、碗、柜、盆、鞘 ...")]),e._v(" "),s("h3",{attrs:{id:"_1-2-容器技术由来"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-容器技术由来"}},[e._v("#")]),e._v(" 1.2 容器技术由来")]),e._v(" "),s("p",[s("img",{attrs:{src:a(356),alt:""}})]),e._v(" "),s("p",[e._v("这里我们需要将上面的程序运行在同一个宿主机上，但是有相互隔离。")]),e._v(" "),s("p",[e._v("我们利用虚拟化技术完全可以解决，但是虚拟化技术成本有点大（需要单独安装操作系统），此时就可以使用容器化技术来解决这个问题，对比虚拟化技术极大的节约了系统开销。")]),e._v(" "),s("p",[e._v("下面图片比较了 Docker 和传统虚拟化方式的不同之处。传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此"),s("strong",[e._v("容器要比传统虚拟机更为轻便")]),e._v("。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(357),alt:""}})]),e._v(" "),s("p",[s("img",{attrs:{src:a(358),alt:""}})]),e._v(" "),s("p",[e._v("那么我们如果想要用到这些容器化技术完成应用A和应用B的隔离，我们应该让它们在哪些层次或纬度上隔离呢？")]),e._v(" "),s("p",[s("img",{attrs:{src:a(359),alt:""}})]),e._v(" "),s("h2",{attrs:{id:"第-2-章-docker-简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第-2-章-docker-简介"}},[e._v("#")]),e._v(" 第 2 章 Docker 简介")]),e._v(" "),s("h3",{attrs:{id:"_2-1-docker-起源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-docker-起源"}},[e._v("#")]),e._v(" 2.1 Docker 起源")]),e._v(" "),s("p",[e._v("Docker 最初是 dotCloud 公司创始人 Solomon Hykes 在法国期间发起的一个公司内部项目，它是基于 dotCloud 公司多年云服务技术的一次革新，并于 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Docker_(software)",target:"_blank",rel:"noopener noreferrer"}},[e._v("2013 年 3 月以 Apache 2.0 授权协议开源"),s("OutboundLink")],1),e._v("，主要项目代码在 "),s("a",{attrs:{href:"https://github.com/moby/moby",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),s("OutboundLink")],1),e._v(" 上进行维护。Docker 项目后来还加入了 Linux 基金会，并成立推动 "),s("a",{attrs:{href:"https://www.opencontainers.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("开放容器联盟（OCI）"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("p",[e._v("Docker 自开源后受到广泛的关注和讨论，至今其 GitHub 项目已经超过 4 万 6 千个星标和一万多个 fork。甚至由于 Docker 项目的火爆，在 2013 年底，"),s("a",{attrs:{href:"https://blog.docker.com/2013/10/dotcloud-is-becoming-docker-inc/",target:"_blank",rel:"noopener noreferrer"}},[e._v("dotCloud 公司决定改名为 Docker"),s("OutboundLink")],1),e._v("。Docker 最初是在 Ubuntu 12.04 上开发实现的；Red Hat 则从 RHEL 6.5 开始对 Docker 进行支持；Google 也在其 PaaS 产品中广泛应用 Docker。")]),e._v(" "),s("h3",{attrs:{id:"_2-2-docker-是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-docker-是什么"}},[e._v("#")]),e._v(" 2.2 Docker 是什么")]),e._v(" "),s("p",[e._v("Docker 使用 Google 公司推出的 "),s("a",{attrs:{href:"https://golang.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Go 语言"),s("OutboundLink")],1),e._v(" 进行开发实现，基于 Linux 内核的 "),s("a",{attrs:{href:"https://zh.wikipedia.org/wiki/Cgroups",target:"_blank",rel:"noopener noreferrer"}},[e._v("cgroup"),s("OutboundLink")],1),e._v("，"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Linux_namespaces",target:"_blank",rel:"noopener noreferrer"}},[e._v("namespace"),s("OutboundLink")],1),e._v("，以及 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Aufs",target:"_blank",rel:"noopener noreferrer"}},[e._v("AUFS"),s("OutboundLink")],1),e._v(" 类的 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Union_mount",target:"_blank",rel:"noopener noreferrer"}},[e._v("Union FS"),s("OutboundLink")],1),e._v(" 等技术，对进程进行封装隔离，属于 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Operating-system-level_virtualization",target:"_blank",rel:"noopener noreferrer"}},[e._v("操作系统层面的虚拟化技术"),s("OutboundLink")],1),e._v("。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。最初实现是基于 "),s("a",{attrs:{href:"https://linuxcontainers.org/lxc/introduction/",target:"_blank",rel:"noopener noreferrer"}},[e._v("LXC"),s("OutboundLink")],1),e._v("，从 0.7 版本以后开始去除 LXC，转而使用自行开发的 "),s("a",{attrs:{href:"https://github.com/docker/libcontainer",target:"_blank",rel:"noopener noreferrer"}},[e._v("libcontainer"),s("OutboundLink")],1),e._v("，从 1.11 开始，则进一步演进为使用 "),s("a",{attrs:{href:"https://github.com/opencontainers/runc",target:"_blank",rel:"noopener noreferrer"}},[e._v("runC"),s("OutboundLink")],1),e._v(" 和 "),s("a",{attrs:{href:"https://github.com/containerd/containerd",target:"_blank",rel:"noopener noreferrer"}},[e._v("containerd"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("p",[e._v("Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。")]),e._v(" "),s("h3",{attrs:{id:"_2-3-为什么要使用-docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-为什么要使用-docker"}},[e._v("#")]),e._v(" 2.3 为什么要使用 Docker")]),e._v(" "),s("p",[e._v("作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。")]),e._v(" "),s("ul",[s("li",[s("p",[s("strong",[e._v("更高效的利用系统资源")])]),e._v(" "),s("p",[e._v("由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("更快速的启动时间")])]),e._v(" "),s("p",[e._v("传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("一致的运行环境")])])])]),e._v(" "),s("p",[e._v("开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug 并未在开发过程中被发现。而 Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 "),s("em",[e._v("「这段代码在我机器上没问题啊」")]),e._v(" 这类问题。")]),e._v(" "),s("ul",[s("li",[s("p",[s("strong",[e._v("持续交付和部署")])]),e._v(" "),s("p",[e._v("对开发和运维（"),s("a",{attrs:{href:"https://zh.wikipedia.org/wiki/DevOps",target:"_blank",rel:"noopener noreferrer"}},[e._v("DevOps"),s("OutboundLink")],1),e._v("）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。")]),e._v(" "),s("p",[e._v("使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 "),s("code",[e._v("Dockerfile")]),e._v(" 来进行镜像构建，并结合 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Continuous_integration",target:"_blank",rel:"noopener noreferrer"}},[e._v("持续集成(Continuous Integration)"),s("OutboundLink")],1),e._v(" 系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Continuous_delivery",target:"_blank",rel:"noopener noreferrer"}},[e._v("持续部署(Continuous Delivery/Deployment)"),s("OutboundLink")],1),e._v(" 系统进行自动部署。")]),e._v(" "),s("p",[e._v("而且使用 "),s("code",[e._v("Dockerfile")]),e._v(" 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("更轻松的迁移")])]),e._v(" "),s("p",[e._v("由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("更轻松的维护和扩展")])]),e._v(" "),s("p",[e._v("Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker 团队同各个开源项目团队一起维护了一大批高质量的 "),s("a",{attrs:{href:"https://store.docker.com/search?q=&source=verified&type=image",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方镜像"),s("OutboundLink")],1),e._v("，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("对比传统虚拟机总结")])]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[e._v("特性")]),e._v(" "),s("th",{staticStyle:{"text-align":"left"}},[e._v("容器")]),e._v(" "),s("th",{staticStyle:{"text-align":"left"}},[e._v("虚拟机")])])]),e._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("启动")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("秒级")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("分钟级")])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("硬盘使用")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("一般为 "),s("code",[e._v("MB")])]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("一般为 "),s("code",[e._v("GB")])])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("性能")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("接近原生")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("弱于")])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("系统支持量")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("单机支持上千个容器")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("一般几十个")])])])])])]),e._v(" "),s("h2",{attrs:{id:"第-3-章-docker-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第-3-章-docker-概述"}},[e._v("#")]),e._v(" 第 3 章 Docker 概述")]),e._v(" "),s("p",[e._v("Docker 包括三个基本概念")]),e._v(" "),s("ul",[s("li",[e._v("镜像（"),s("code",[e._v("Image")]),e._v("）")]),e._v(" "),s("li",[e._v("容器（"),s("code",[e._v("Container")]),e._v("）")]),e._v(" "),s("li",[e._v("仓库（"),s("code",[e._v("Repository")]),e._v("）")])]),e._v(" "),s("p",[e._v("理解了这三个概念，就理解了 Docker 的整个生命周期。")]),e._v(" "),s("h3",{attrs:{id:"_3-1-docker-引擎"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-docker-引擎"}},[e._v("#")]),e._v(" 3.1 Docker 引擎")]),e._v(" "),s("p",[e._v("Docker 引擎是一个包含以下主要组件的客户端服务器应用程序。")]),e._v(" "),s("ul",[s("li",[e._v("一种服务器，它是一种称为守护进程并且长时间运行的程序。")]),e._v(" "),s("li",[e._v("REST API用于指定程序可以用来与守护进程通信的接口，并指示它做什么。")]),e._v(" "),s("li",[e._v("一个有命令行界面 (CLI) 工具的客户端。")])]),e._v(" "),s("p",[e._v("Docker 引擎组件的流程如下图所示：")]),e._v(" "),s("p",[s("img",{attrs:{src:a(360),alt:""}})]),e._v(" "),s("p",[e._v("Docker 引擎可以从 Docker 网站下载，也可以基于 GitHub 上的源码进行构建。无论是开源版本还是商业版本，都有 Linux 和 Windows 版本。")]),e._v(" "),s("p",[e._v("Docker 引擎主要有两个版本：企业版（EE）和社区版（CE）")]),e._v(" "),s("p",[e._v("每个季度，企业版和社区版都会发布一个稳定版本。社区版会提供4个月的支持，而企业版会提供12个月的支持。")]),e._v(" "),s("p",[e._v("从 2017 年第一季度开始，Docker 版本号遵循 YY.MM-xx 格式，类似于 Ubuntu等项目。例如，2018 年 6月第一次发布社区版为 18.06.0-ce。")]),e._v(" "),s("blockquote",[s("p",[e._v("注：2017 年第一季度以前，Docker版本号遵循大版本号.小版本号的格式。采用新格式前的最后一个版本是 Docker 1.13。")])]),e._v(" "),s("h3",{attrs:{id:"_3-2-docker-架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-docker-架构"}},[e._v("#")]),e._v(" 3.2 Docker 架构")]),e._v(" "),s("p",[e._v("Docker 使用客户端-服务器 (C/S) 架构模式，使用远程 API 来管理和创建 Docker 容器。")]),e._v(" "),s("p",[e._v("Docker 容器通过 Docker 镜像来创建。")]),e._v(" "),s("p",[e._v("容器与镜像的关系类似于面向对象编程中的对象与类。")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[e._v("Docker")]),e._v(" "),s("th",{staticStyle:{"text-align":"left"}},[e._v("面向对象")])])]),e._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("容器")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("对象")])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("镜像")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("类")])])])]),e._v(" "),s("p",[s("img",{attrs:{src:a(361),alt:""}})]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[e._v("标题")]),e._v(" "),s("th",{staticStyle:{"text-align":"left"}},[e._v("说明")])])]),e._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("镜像(Images)")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("Docker 镜像是用于创建 Docker 容器的模板。")])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("容器(Container)")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("容器是独立运行的一个或一组应用。")])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("客户端(Client)")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("Docker 客户端通过命令行或者其他工具使用 Docker API (https://docs.docker.com/reference/api/docker_remote_api) 与 Docker 的守护进程通信。")])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("主机(Host)")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。")])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("仓库(Registry)")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub("),s("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://hub.docker.com"),s("OutboundLink")],1),e._v(") 提供了庞大的镜像集合供使用。")])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("Docker Machine")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。")])])])]),e._v(" "),s("h3",{attrs:{id:"_3-3-docker-镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-docker-镜像"}},[e._v("#")]),e._v(" 3.3 Docker 镜像")]),e._v(" "),s("h4",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),s("p",[e._v("我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 "),s("code",[e._v("root")]),e._v(" 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 "),s("code",[e._v("root")]),e._v(" 文件系统。比如官方镜像 "),s("code",[e._v("ubuntu:16.04")]),e._v(" 就包含了完整的一套 Ubuntu 16.04 最小系统的 "),s("code",[e._v("root")]),e._v(" 文件系统。")]),e._v(" "),s("p",[e._v("Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。")]),e._v(" "),s("p",[e._v("容器创建是需要指定使用的镜像，每个镜像都由唯一的标识Image ID，默认是128位，可以使用前16位作为缩略形式，也可以使用镜像镜像名和版本号两个部分组合成唯一表示，例如nginx:latest，如果省略版本号，默认使用的是最新版本标签，也就是latest，所以如果默认直接写nginx，其实系统执行的实际命令就是nginx:latest。")]),e._v(" "),s("h4",{attrs:{id:"分层存储"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分层存储"}},[e._v("#")]),e._v(" 分层存储")]),e._v(" "),s("p",[e._v("因为镜像包含操作系统完整的 "),s("code",[e._v("root")]),e._v(" 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Union_mount",target:"_blank",rel:"noopener noreferrer"}},[e._v("Union FS"),s("OutboundLink")],1),e._v(" 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。")]),e._v(" "),s("p",[e._v("镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。")]),e._v(" "),s("p",[e._v("分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。")]),e._v(" "),s("p",[e._v("关于镜像构建，将会在后续相关章节中做进一步的讲解。")]),e._v(" "),s("h3",{attrs:{id:"_3-4-docker-容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-docker-容器"}},[e._v("#")]),e._v(" 3.4 Docker 容器")]),e._v(" "),s("p",[e._v("镜像（"),s("code",[e._v("Image")]),e._v("）和容器（"),s("code",[e._v("Container")]),e._v("）的关系，就像是面向对象程序设计中的 "),s("code",[e._v("类")]),e._v(" 和 "),s("code",[e._v("实例")]),e._v(" 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。")]),e._v(" "),s("p",[e._v("容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Linux_namespaces",target:"_blank",rel:"noopener noreferrer"}},[e._v("命名空间"),s("OutboundLink")],1),e._v("。因此容器可以拥有自己的 "),s("code",[e._v("root")]),e._v(" 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。")]),e._v(" "),s("p",[e._v("前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为"),s("strong",[e._v("容器存储层")]),e._v("。")]),e._v(" "),s("p",[e._v("容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。")]),e._v(" "),s("p",[e._v("按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 "),s("code",[e._v("数据卷（Volume）")]),e._v("、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。")]),e._v(" "),s("p",[e._v("数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。")]),e._v(" "),s("h3",{attrs:{id:"_3-5-docker-仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-docker-仓库"}},[e._v("#")]),e._v(" 3.5 Docker 仓库")]),e._v(" "),s("h4",{attrs:{id:"概述-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述-2"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),s("p",[e._v("镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，"),s("code",[e._v("Docker Registry")]),e._v(" 就是这样的服务。")]),e._v(" "),s("p",[e._v("一个 "),s("strong",[e._v("Docker Registry")]),e._v(" 中可以包含多个"),s("strong",[e._v("仓库")]),e._v("（"),s("code",[e._v("Repository")]),e._v("）；每个仓库可以包含多个"),s("strong",[e._v("标签")]),e._v("（"),s("code",[e._v("Tag")]),e._v("）；每个标签对应一个镜像。")]),e._v(" "),s("p",[e._v("通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 "),s("code",[e._v("<仓库名>:<标签>")]),e._v(" 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 "),s("code",[e._v("latest")]),e._v(" 作为默认标签。")]),e._v(" "),s("p",[e._v("以 "),s("a",{attrs:{href:"https://store.docker.com/images/ubuntu",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ubuntu 镜像"),s("OutboundLink")],1),e._v(" 为例，"),s("code",[e._v("ubuntu")]),e._v(" 是仓库的名字，其内包含有不同的版本标签，如，"),s("code",[e._v("14.04")]),e._v(", "),s("code",[e._v("16.04")]),e._v("。我们可以通过 "),s("code",[e._v("ubuntu:14.04")]),e._v("，或者 "),s("code",[e._v("ubuntu:16.04")]),e._v(" 来具体指定所需哪个版本的镜像。如果忽略了标签，比如 "),s("code",[e._v("ubuntu")]),e._v("，那将视为 "),s("code",[e._v("ubuntu:latest")]),e._v("。")]),e._v(" "),s("p",[e._v("仓库名经常以 "),s("em",[e._v("两段式路径")]),e._v(" 形式出现，比如 "),s("code",[e._v("jwilder/nginx-proxy")]),e._v("，前者往往意味着 Docker Registry 多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。")]),e._v(" "),s("h4",{attrs:{id:"公有-docker-registry"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#公有-docker-registry"}},[e._v("#")]),e._v(" 公有 Docker Registry")]),e._v(" "),s("p",[e._v("Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。")]),e._v(" "),s("p",[e._v("最常使用的 Registry 公开服务是官方的 "),s("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Hub"),s("OutboundLink")],1),e._v("，这也是默认的 Registry，并拥有大量的高质量的官方镜像。除此以外，还有 "),s("a",{attrs:{href:"https://coreos.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CoreOS"),s("OutboundLink")],1),e._v(" 的 "),s("a",{attrs:{href:"https://quay.io/repository/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Quay.io"),s("OutboundLink")],1),e._v("，CoreOS 相关的镜像存储在这里；Google 的 "),s("a",{attrs:{href:"https://cloud.google.com/container-registry/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Google Container Registry"),s("OutboundLink")],1),e._v("，"),s("a",{attrs:{href:"http://kubernetes.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kubernetes"),s("OutboundLink")],1),e._v(" 的镜像使用的就是这个服务。")]),e._v(" "),s("p",[e._v("由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对 Docker Hub 的镜像服务（"),s("code",[e._v("Registry Mirror")]),e._v("），这些镜像服务被称为"),s("strong",[e._v("加速器")]),e._v("。常见的有 "),s("a",{attrs:{href:"https://cr.console.aliyun.com/#/accelerator",target:"_blank",rel:"noopener noreferrer"}},[e._v("阿里云加速器"),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"https://www.daocloud.io/mirror#accelerator-doc",target:"_blank",rel:"noopener noreferrer"}},[e._v("DaoCloud 加速器"),s("OutboundLink")],1),e._v(" 等。使用加速器会直接从国内的地址下载 Docker Hub 的镜像，比直接从 Docker Hub 下载速度会提高很多。")]),e._v(" "),s("p",[e._v("国内也有一些云服务商提供类似于 Docker Hub 的公开服务。比如 "),s("a",{attrs:{href:"https://hub.tenxcloud.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("时速云镜像仓库"),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"https://c.163.com/hub#/m/library/",target:"_blank",rel:"noopener noreferrer"}},[e._v("网易云镜像服务"),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"https://hub.daocloud.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("DaoCloud 镜像市场"),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"https://cr.console.aliyun.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("阿里云镜像库"),s("OutboundLink")],1),e._v(" 等。")]),e._v(" "),s("h4",{attrs:{id:"私有-docker-registry"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#私有-docker-registry"}},[e._v("#")]),e._v(" 私有 Docker Registry")]),e._v(" "),s("p",[e._v("除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 "),s("a",{attrs:{href:"https://store.docker.com/images/registry/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Registry"),s("OutboundLink")],1),e._v(" 镜像，可以直接使用做为私有 Registry 服务。")]),e._v(" "),s("p",[e._v("开源的 Docker Registry 镜像只提供了 "),s("a",{attrs:{href:"https://docs.docker.com/registry/spec/api/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Registry API"),s("OutboundLink")],1),e._v(" 的服务端实现，足以支持 "),s("code",[e._v("docker")]),e._v(" 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。在官方的商业化版本 "),s("a",{attrs:{href:"https://docs.docker.com/datacenter/dtr/2.0/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Trusted Registry"),s("OutboundLink")],1),e._v(" 中，提供了这些高级功能。")]),e._v(" "),s("p",[e._v("除了官方的 Docker Registry 外，还有第三方软件实现了 Docker Registry API，甚至提供了用户界面以及一些高级功能。比如，"),s("a",{attrs:{href:"https://github.com/vmware/harbor",target:"_blank",rel:"noopener noreferrer"}},[e._v("VMWare Harbor"),s("OutboundLink")],1),e._v(" 和 "),s("a",{attrs:{href:"https://www.sonatype.com/docker",target:"_blank",rel:"noopener noreferrer"}},[e._v("Sonatype Nexus"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("h2",{attrs:{id:"第-4-章-docker-安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第-4-章-docker-安装"}},[e._v("#")]),e._v(" 第 4 章 Docker 安装")]),e._v(" "),s("p",[e._v("Docker 在 1.13 版本之后，从 2017 年的 3 月 1 日开始，版本命名规则变为如下：")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[e._v("项目")]),e._v(" "),s("th",{staticStyle:{"text-align":"left"}},[e._v("说明")])])]),e._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("版本格式")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("YY.MM")])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("Stable 版本")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("每个季度发行")])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("Edge 版本")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("每个月发行")])])])]),e._v(" "),s("p",[e._v("同时 Docker 划分为 CE 和 EE。CE 即社区版（免费，支持周期三个月），EE 即企业版，强调安全，付费使用。")]),e._v(" "),s("p",[e._v("Docker CE 每月发布一个 Edge 版本 (17.03, 17.04, 17.05...)，每三个月发布一个 Stable 版本 (17.03, 17.06, 17.09...)，Docker EE 和 Stable 版本号保持一致，但每个版本提供一年维护。")]),e._v(" "),s("p",[e._v("官方网站上有各种环境下的 "),s("a",{attrs:{href:"https://docs.docker.com/engine/installation/",target:"_blank",rel:"noopener noreferrer"}},[e._v("安装指南"),s("OutboundLink")],1),e._v("，这里主要介绍 Docker CE 在 Linux 上的安装。")]),e._v(" "),s("h3",{attrs:{id:"_4-1-ubuntu-安装-docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-ubuntu-安装-docker"}},[e._v("#")]),e._v(" 4.1 Ubuntu 安装 Docker")]),e._v(" "),s("h4",{attrs:{id:"准备工作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#准备工作"}},[e._v("#")]),e._v(" 准备工作")]),e._v(" "),s("p",[e._v("Docker CE 支持以下版本的 "),s("a",{attrs:{href:"https://www.ubuntu.com/server",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ubuntu"),s("OutboundLink")],1),e._v(" 操作系统：")]),e._v(" "),s("ul",[s("li",[e._v("Artful 17.10 (Docker CE 17.11 Edge +)")]),e._v(" "),s("li",[e._v("Xenial 16.04 (LTS)")]),e._v(" "),s("li",[e._v("Trusty 14.04 (LTS)")])]),e._v(" "),s("p",[e._v("Docker CE 可以安装在 64 位的 x86 平台或 ARM 平台上。Ubuntu 发行版中，LTS（Long-Term-Support）长期支持版本，会获得 5 年的升级维护支持，这样的版本会更稳定，因此在生产环境中推荐使用 LTS 版本,当前最新的 LTS 版本为 Ubuntu 16.04。")]),e._v(" "),s("h4",{attrs:{id:"卸载旧版本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#卸载旧版本"}},[e._v("#")]),e._v(" 卸载旧版本")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# apt-get remove docker docker-engine docker.io containerd runc")]),e._v("\n")])])]),s("h4",{attrs:{id:"使用-apt-安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-apt-安装"}},[e._v("#")]),e._v(" 使用 Apt 安装")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 更新数据源")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" update\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 安装所需依赖")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" -y "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" apt-transport-https ca-certificates "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" software-properties-common\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 安装 GPG 证书")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" apt-key "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" -\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 新增数据源")]),e._v("\nadd-apt-repository "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu '),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("lsb_release -cs"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(' stable"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 更新并安装 Docker CE")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" -y update "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" -y "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" docker-ce\n")])])]),s("h4",{attrs:{id:"使用脚本自动安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用脚本自动安装"}},[e._v("#")]),e._v(" 使用脚本自动安装")]),e._v(" "),s("p",[e._v("在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Ubuntu 系统上可以使用这套脚本安装：")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -fsSL get.docker.com -o get-docker.sh\n")])])]),s("p",[e._v("执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker CE 的 Edge 版本安装在系统中。")]),e._v(" "),s("h4",{attrs:{id:"启动-docker-ce"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动-docker-ce"}},[e._v("#")]),e._v(" 启动 Docker CE")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# systemctl enable docker")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# systemctl start docker")]),e._v("\n")])])]),s("p",[e._v("Ubuntu 14.04 请使用以下命令启动：")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v(" docker start\n")])])]),s("h4",{attrs:{id:"测试-docker-是否安装正确"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试-docker-是否安装正确"}},[e._v("#")]),e._v(" 测试 Docker 是否安装正确")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("root@pyy:~"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker --version")]),e._v("\nDocker version "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("19.03")]),e._v(".8, build afacb8b7f0\nroot@pyy:~"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker run hello-world")]),e._v("\nUnable to "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("find")]),e._v(" image "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'hello-world:latest'")]),e._v(" locally\nlatest: Pulling from library/hello-world\n0e03bdcc26d7: Pull complete \nDigest: sha256:8e3114318a995a1ee497790535e7b88365222a21771ae7e53687ad76563e8e76\nStatus: Downloaded newer image "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" hello-world:latest\n\nHello from Docker"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v("\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(". The Docker client contacted the Docker daemon.\n "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(". The Docker daemon pulled the "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"hello-world"')]),e._v(" image from the Docker Hub.\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("amd64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v(". The Docker daemon created a new container from that image "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("which")]),e._v(" runs the\n    executable that produces the output you are currently reading.\n "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(". The Docker daemon streamed that output to the Docker client, "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("which")]),e._v(" sent it\n    to your terminal.\n\nTo try something "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("more")]),e._v(" ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("bash")]),e._v("\n\nShare images, automate workflows, and "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("more")]),e._v(" with a "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("free")]),e._v(" Docker ID:\n https://hub.docker.com/\n\nFor "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("more")]),e._v(" examples and ideas, visit:\n https://docs.docker.com/get-started/\n\n")])])]),s("p",[e._v("若能正常输出以上信息，则说明安装成功。")]),e._v(" "),s("h4",{attrs:{id:"镜像加速"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#镜像加速"}},[e._v("#")]),e._v(" 镜像加速")]),e._v(" "),s("p",[e._v("国内从 Docker Hub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。Docker 官方和国内很多云服务商都提供了国内加速器服务，例如：")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://docs.docker.com/registry/recipes/mirror/#use-case-the-china-registry-mirror",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker 官方提供的中国 registry mirror"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://cr.console.aliyun.com/#/accelerator",target:"_blank",rel:"noopener noreferrer"}},[e._v("阿里云加速器"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://www.daocloud.io/mirror#accelerator-doc",target:"_blank",rel:"noopener noreferrer"}},[e._v("DaoCloud 加速器"),s("OutboundLink")],1)])]),e._v(" "),s("p",[e._v("我们以 Docker 官方加速器为例进行介绍。")]),e._v(" "),s("p",[s("strong",[e._v("Ubuntu 16.04+、Debian 8+、CentOS 7")])]),e._v(" "),s("p",[e._v("对于使用 "),s("a",{attrs:{href:"https://www.freedesktop.org/wiki/Software/systemd/",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemd"),s("OutboundLink")],1),e._v(" 的系统，请在 "),s("code",[e._v("/etc/docker/daemon.json")]),e._v(" 中写入如下内容（如果文件不存在请新建该文件）")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"registry-mirrors"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"https://registry.docker-cn.com"')]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("blockquote",[s("p",[e._v("注意，一定要保证该文件符合 json 规范，否则 Docker 将不能启动。")])]),e._v(" "),s("p",[e._v("重新启动服务。")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("systemctl daemon-reload\nsystemctl restart docker\n")])])]),s("h4",{attrs:{id:"检查加速器是否生效"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#检查加速器是否生效"}},[e._v("#")]),e._v(" 检查加速器是否生效")]),e._v(" "),s("p",[e._v("配置加速器之后，如果拉取镜像仍然十分缓慢，请手动检查加速器配置是否生效，在命令行执行 "),s("code",[e._v("docker info")]),e._v("，如果从结果中看到了如下内容，说明配置成功。")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("Registry Mirrors:\n https://registry.docker-cn.com/\n")])])]),s("p",[e._v("当然, 也可以选择使用阿里云的镜像加速, 具体如何配置可自行 google。")]),e._v(" "),s("h3",{attrs:{id:"_4-2-centos-安装-docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-centos-安装-docker"}},[e._v("#")]),e._v(" 4.2 CentOS 安装 Docker")]),e._v(" "),s("h4",{attrs:{id:"准备工作-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#准备工作-2"}},[e._v("#")]),e._v(" 准备工作")]),e._v(" "),s("p",[e._v("Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10。 CentOS 7 满足最低内核的要求，但由于内核版本比较低，部分功能（如 "),s("code",[e._v("overlay2")]),e._v(" 存储层驱动）无法使用，并且部分功能可能不太稳定。")]),e._v(" "),s("h4",{attrs:{id:"卸载旧版本-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#卸载旧版本-2"}},[e._v("#")]),e._v(" 卸载旧版本")]),e._v(" "),s("p",[e._v("旧版本的 Docker 称为 "),s("code",[e._v("docker")]),e._v(" 或者 "),s("code",[e._v("docker-engine")]),e._v("，使用以下命令卸载旧版本：")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# yum remove docker \\")]),e._v("\n                  docker-client "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n                  docker-client-latest "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n                  docker-common "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n                  docker-latest "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n                  docker-latest-logrotate "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n                  docker-logrotate "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n                  docker-selinux "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n                  docker-engine-selinux "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n                  docker-engine\n")])])]),s("h4",{attrs:{id:"使用-yum-安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-yum-安装"}},[e._v("#")]),e._v(" 使用 yum 安装")]),e._v(" "),s("p",[e._v("执行以下命令安装依赖包：")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# yum install -y yum-utils \\")]),e._v("\n           device-mapper-persistent-data "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n           lvm2\n")])])]),s("p",[e._v("鉴于国内网络问题，强烈建议使用国内源，官方源请在注释中查看。")]),e._v(" "),s("p",[e._v("执行下面的命令添加 "),s("code",[e._v("yum")]),e._v(" 软件源：")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# yum-config-manager \\")]),e._v("\n    --add-repo "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 官方源")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# # yum-config-manager \\")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#     --add-repo \\")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#     https://download.docker.com/linux/centos/docker-ce.repo ")]),e._v("\n")])])]),s("p",[e._v("如果需要最新版本的 Docker CE 请使用以下命令：")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# yum-config-manager --enable docker-ce-edge")]),e._v("\n")])])]),s("p",[e._v("如果需要测试版本的 Docker CE 请使用以下命令：")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# yum-config-manager --enable docker-ce-test")]),e._v("\n")])])]),s("h4",{attrs:{id:"安装-docker-ce"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装-docker-ce"}},[e._v("#")]),e._v(" 安装 Docker CE")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# yum makecache fast")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# yum install docker-ce")]),e._v("\n")])])]),s("h4",{attrs:{id:"使用脚本自动安装-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用脚本自动安装-2"}},[e._v("#")]),e._v(" 使用脚本自动安装")]),e._v(" "),s("p",[e._v("在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，CentOS 系统上可以使用这套脚本安装：")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# curl -fsSL get.docker.com -o get-docker.sh")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# sh get-docker.sh --mirror Aliyun")]),e._v("\n")])])]),s("p",[e._v("执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker CE 的 Edge 版本安装在系统中。")]),e._v(" "),s("h4",{attrs:{id:"启动-docker-ce-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动-docker-ce-2"}},[e._v("#")]),e._v(" 启动 Docker CE")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# systemctl enable docker")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# systemctl start docker")]),e._v("\n")])])]),s("h2",{attrs:{id:"第-5-章-docker-镜像操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第-5-章-docker-镜像操作"}},[e._v("#")]),e._v(" 第 5 章 Docker 镜像操作")]),e._v(" "),s("h3",{attrs:{id:"_5-1-搜索一个镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-搜索一个镜像"}},[e._v("#")]),e._v(" 5.1 搜索一个镜像")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker search alpine")]),e._v("\nNAME                                   DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED\nalpine                                 A minimal Docker image based on Alpine Linux…   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("6313")]),e._v("                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nmhart/alpine-node                      Minimal Node.js built on Alpine Linux           "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("462")]),e._v("\nanapsix/alpine-java                    Oracle Java "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("and "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" with GLIBC "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.28")]),e._v(" over A…   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("440")]),e._v("                                     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nfrolvlad/alpine-glibc                  Alpine Docker image with glibc "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("~12MB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("          "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("237")]),e._v("                                     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\ngliderlabs/alpine                      Image based on Alpine Linux will "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("help")]),e._v(" you wi…   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("181")]),e._v("\nalpine/git                             A  simple "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" container running "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" alpine li…   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("122")]),e._v("                                     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nmvertes/alpine-mongo                   light MongoDB container                         "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("110")]),e._v("                                     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nyobasystems/alpine-mariadb             MariaDB running on Alpine Linux "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("docker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("am…   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("62")]),e._v("                                      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nalpine/socat                           Run socat "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("command")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" alpine container           "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("50")]),e._v("                                      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nkiasaki/alpine-postgres                PostgreSQL docker image based on Alpine Linux   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("45")]),e._v("                                      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\ndavidcaste/alpine-tomcat               Apache Tomcat "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("7")]),e._v("/8 using Oracle Java "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("7")]),e._v("/8 with…   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("42")]),e._v("                                      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nzzrot/alpine-caddy                     Caddy Server Docker Container running on Alp…   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("36")]),e._v("                                      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\njfloff/alpine-python                   A small, "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("more")]),e._v(" complete, Python Docker image …   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("35")]),e._v("                                      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nhermsi/alpine-sshd                     Dockerize your OpenSSH-server with "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rsync")]),e._v(" and…   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("30")]),e._v("                                      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nbyrnedo/alpine-curl                    Alpine linux with "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" installed and "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" as …   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("30")]),e._v("                                      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\netopian/alpine-php-wordpress           Alpine WordPress Nginx PHP-FPM WP-CLI           "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("24")]),e._v("                                      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nhermsi/alpine-fpm-php                  Dockerize your FPM PHP "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("7.4")]),e._v(" upon a lightweigh…   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("24")]),e._v("                                      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nzenika/alpine-chrome                   Chrome running "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" headless mode "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" a tiny Al…   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("19")]),e._v("                                      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nbashell/alpine-bash                    Alpine Linux with /bin/bash as a default she…   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("16")]),e._v("                                      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\ndavidcaste/alpine-java-unlimited-jce   Oracle Java "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("and "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" with GLIBC "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.21")]),e._v(" over A…   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("13")]),e._v("                                      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nspotify/alpine                         Alpine image with "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("bash")]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v(" and "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("            "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("11")]),e._v("                                      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nroribio16/alpine-sqs                   Dockerized ElasticMQ server + web UI over Al…   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),e._v("                                       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\ncfmanteiga/alpine-bash-curl-jq         Docker Alpine image with Bash, "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" and jq p…   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v("                                       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nhermsi/alpine-varnish                  Dockerize Varnish upon a lightweight alpine-…   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v("                                       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\ngoodguykoi/alpine-curl-internal        simple alpine image with "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" installed no C…   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("                                       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n\n")])])]),s("h3",{attrs:{id:"_5-2-拉取一个镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-拉取一个镜像"}},[e._v("#")]),e._v(" 5.2 拉取一个镜像")]),e._v(" "),s("p",[e._v("之前提到过，"),s("a",{attrs:{href:"https://hub.docker.com/explore/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Hub"),s("OutboundLink")],1),e._v(" 上有大量的高质量的镜像可以用，这里我们就说一下怎么获取这些镜像。")]),e._v(" "),s("p",[e._v("从 Docker 镜像仓库获取镜像的命令是 "),s("code",[e._v("docker pull")]),e._v("。其命令格式为：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("docker pull "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("选项"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Docker Registry 地址"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(":端口号"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("/"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("仓库名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(":标签"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),s("p",[e._v("具体的选项可以通过 "),s("code",[e._v("docker pull --help")]),e._v(" 命令看到，这里我们说一下镜像名称的格式。")]),e._v(" "),s("ul",[s("li",[e._v("Docker 镜像仓库地址：地址的格式一般是 "),s("code",[e._v("<域名/IP>[:端口号]")]),e._v("。默认地址是 Docker Hub。")]),e._v(" "),s("li",[e._v("仓库名：如之前所说，这里的仓库名是两段式名称，即 "),s("code",[e._v("<用户名>/<软件名>")]),e._v("。对于 Docker Hub，如果不给出用户名，则默认为 "),s("code",[e._v("library")]),e._v("，也就是官方镜像。")])]),e._v(" "),s("blockquote",[s("p",[e._v("镜像结构：registry_name/repository_name/image_name:tag_name")]),e._v(" "),s("p",[e._v("例如：docker.io/library/ubuntu:16.04")])]),e._v(" "),s("p",[e._v("比如：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker pull ubuntu:16.04")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("16.04")]),e._v(": Pulling from library/ubuntu\nfe703b657a32: Pull complete \nf9df1fafd224: Pull complete \na645a4b887f9: Pull complete \n57db7fe0b522: Pull complete \nDigest: sha256:e9938f45e51d9ff46e2b05a62e0546d0f07489b7f22fbc5288defe760599e38a\nStatus: Downloaded newer image "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" ubuntu:16.04\ndocker.io/library/ubuntu:16.04\n")])])]),s("p",[e._v("上面的命令中没有给出 Docker 镜像仓库地址，因此将会从 Docker Hub 获取镜像。而镜像名称是 "),s("code",[e._v("ubuntu:16.04")]),e._v("，因此将会获取官方镜像 "),s("code",[e._v("library/ubuntu")]),e._v(" 仓库中标签为 "),s("code",[e._v("16.04")]),e._v(" 的镜像。")]),e._v(" "),s("p",[e._v("从下载过程中可以看到我们之前提及的分层存储的概念，镜像是由多层存储所构成。下载也是一层层的去下载，并非单一文件。下载过程中给出了每一层的 ID 的前 12 位。并且下载结束后，给出该镜像完整的 "),s("code",[e._v("sha256")]),e._v(" 的摘要，以确保下载一致性。")]),e._v(" "),s("p",[e._v("在使用上面命令的时候，你可能会发现，你所看到的层 ID 以及 "),s("code",[e._v("sha256")]),e._v(" 的摘要和这里的不一样。这是因为官方镜像是一直在维护的，有任何新的 bug，或者版本更新，都会进行修复再以原来的标签发布，这样可以确保任何使用这个标签的用户可以获得更安全、更稳定的镜像。")]),e._v(" "),s("h3",{attrs:{id:"_5-3-查看本地镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-查看本地镜像"}},[e._v("#")]),e._v(" 5.3 查看本地镜像")]),e._v(" "),s("p",[e._v("要想列出已经下载下来的镜像，可以使用 "),s("code",[e._v("docker image ls")]),e._v(" 命令。")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker image ls")]),e._v("\nREPOSITORY           TAG                 IMAGE ID            CREATED             SIZE\nredis                latest              5f515359c7f8        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(" days ago          "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("183")]),e._v(" MB\nnginx                latest              05a60462f8ba        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(" days ago          "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("181")]),e._v(" MB\nmongo                "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.2")]),e._v("                 fe9198c04d62        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(" days ago          "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("342")]),e._v(" MB\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("               "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("              00285df0df87        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(" days ago          "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("342")]),e._v(" MB\nubuntu               "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("16.04")]),e._v("               f753707788c5        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" weeks ago         "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("127")]),e._v(" MB\nubuntu               latest              f753707788c5        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" weeks ago         "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("127")]),e._v(" MB\nubuntu               "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("14.04")]),e._v("               1e0c3dd64ccd        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" weeks ago         "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("188")]),e._v(" MB\n")])])]),s("p",[e._v("列表包含了 "),s("code",[e._v("仓库名")]),e._v("、"),s("code",[e._v("标签")]),e._v("、"),s("code",[e._v("镜像 ID")]),e._v("、"),s("code",[e._v("创建时间")]),e._v(" 以及 "),s("code",[e._v("所占用的空间")]),e._v("。")]),e._v(" "),s("p",[e._v("其中仓库名、标签在之前的基础概念章节已经介绍过了。"),s("strong",[e._v("镜像 ID")]),e._v(" 则是镜像的唯一标识，一个镜像可以对应多个"),s("strong",[e._v("标签")]),e._v("。因此，在上面的例子中，我们可以看到 "),s("code",[e._v("ubuntu:16.04")]),e._v(" 和 "),s("code",[e._v("ubuntu:latest")]),e._v(" 拥有相同的 ID，因为它们对应的是同一个镜像。")]),e._v(" "),s("h4",{attrs:{id:"镜像体积"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#镜像体积"}},[e._v("#")]),e._v(" 镜像体积")]),e._v(" "),s("p",[e._v("如果仔细观察，会注意到，这里标识的所占用空间和在 Docker Hub 上看到的镜像大小不同。比如，"),s("code",[e._v("ubuntu:16.04")]),e._v(" 镜像大小，在这里是 "),s("code",[e._v("127 MB")]),e._v("，但是在 "),s("a",{attrs:{href:"https://hub.docker.com/r/library/ubuntu/tags/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Hub"),s("OutboundLink")],1),e._v(" 显示的却是 "),s("code",[e._v("50 MB")]),e._v("。这是因为 Docker Hub 中显示的体积是压缩后的体积。在镜像下载和上传过程中镜像是保持着压缩状态的，因此 Docker Hub 所显示的大小是网络传输中更关心的流量大小。而 "),s("code",[e._v("docker image ls")]),e._v(" 显示的是镜像下载到本地后，展开的大小，准确说，是展开后的各层所占空间的总和，因为镜像到本地后，查看空间的时候，更关心的是本地磁盘空间占用的大小。")]),e._v(" "),s("p",[e._v("另外一个需要注意的问题是，"),s("code",[e._v("docker image ls")]),e._v(" 列表中的镜像体积总和并非是所有镜像实际硬盘消耗。由于 Docker 镜像是多层存储结构，并且可以继承、复用，因此不同镜像可能会因为使用相同的基础镜像，从而拥有共同的层。由于 Docker 使用 Union FS，相同的层只需要保存一份即可，因此实际镜像硬盘占用空间很可能要比这个列表镜像大小的总和要小的多。")]),e._v(" "),s("p",[e._v("你可以通过以下命令来便捷的查看镜像、容器、数据卷所占用的空间。")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker system df")]),e._v("\n\nTYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE\nImages              "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("24")]),e._v("                  "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("                   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(".992GB             "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(".992GB "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("100")]),e._v("%"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nContainers          "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("                   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("                   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("62")]),e._v(".82MB             "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("62")]),e._v(".82MB "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("100")]),e._v("%"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nLocal Volumes       "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("9")]),e._v("                   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("                   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("652")]),e._v(".2MB             "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("652")]),e._v(".2MB "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("100")]),e._v("%"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nBuild Cache                                                 0B                  0B\n")])])]),s("h4",{attrs:{id:"虚悬镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#虚悬镜像"}},[e._v("#")]),e._v(" 虚悬镜像")]),e._v(" "),s("p",[e._v("上面的镜像列表中，还可以看到一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 ``。：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("               "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("              00285df0df87        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(" days ago          "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("342")]),e._v(" MB\n")])])]),s("p",[e._v("这个镜像原本是有镜像名和标签的，原来为 "),s("code",[e._v("mongo:3.2")]),e._v("，随着官方镜像维护，发布了新版本后，重新 "),s("code",[e._v("docker pull mongo:3.2")]),e._v(" 时，"),s("code",[e._v("mongo:3.2")]),e._v(" 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 "),s("code",[e._v("<none>")]),e._v("。除了 "),s("code",[e._v("docker pull")]),e._v(" 可能导致这种情况，"),s("code",[e._v("docker build")]),e._v(" 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 "),s("code",[e._v("<none>")]),e._v(" 的镜像。这类无标签镜像也被称为 "),s("strong",[e._v("虚悬镜像(dangling image)")]),e._v(" ，可以用下面的命令专门显示这类镜像：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker image ls -f dangling=true")]),e._v("\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("              "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("              00285df0df87        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(" days ago          "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("342")]),e._v(" MB\n")])])]),s("p",[e._v("一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker image prune")]),e._v("\n")])])]),s("h4",{attrs:{id:"中间层镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中间层镜像"}},[e._v("#")]),e._v(" 中间层镜像")]),e._v(" "),s("p",[e._v("为了加速镜像构建、重复利用资源，Docker 会利用 "),s("strong",[e._v("中间层镜像")]),e._v("。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。默认的 "),s("code",[e._v("docker image ls")]),e._v(" 列表中只会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，需要加 "),s("code",[e._v("-a")]),e._v(" 参数。")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ docker image "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v(" -a\n")])])]),s("p",[e._v("这样会看到很多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都是中间层镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜像因为依赖丢失而出错。实际上，这些镜像也没必要删除，因为之前说过，相同的层只会存一遍，而这些镜像是别的镜像的依赖，因此并不会因为它们被列出来而多存了一份，无论如何你也会需要它们。只要删除那些依赖它们的镜像后，这些依赖的中间层镜像也会被连带删除。")]),e._v(" "),s("h4",{attrs:{id:"列出部分镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#列出部分镜像"}},[e._v("#")]),e._v(" 列出部分镜像")]),e._v(" "),s("p",[e._v("不加任何参数的情况下，"),s("code",[e._v("docker image ls")]),e._v(" 会列出所有顶级镜像，但是有时候我们只希望列出部分镜像。"),s("code",[e._v("docker image ls")]),e._v(" 有好几个参数可以帮助做到这个事情。")]),e._v(" "),s("p",[e._v("根据仓库名列出镜像")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker image ls ubuntu")]),e._v("\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nubuntu              "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("16.04")]),e._v("               f753707788c5        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" weeks ago         "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("127")]),e._v(" MB\nubuntu              latest              f753707788c5        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" weeks ago         "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("127")]),e._v(" MB\nubuntu              "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("14.04")]),e._v("               1e0c3dd64ccd        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" weeks ago         "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("188")]),e._v(" MB\n")])])]),s("p",[e._v("列出特定的某个镜像，也就是说指定仓库名和标签")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker image ls ubuntu:16.04")]),e._v("\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nubuntu              "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("16.04")]),e._v("               f753707788c5        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" weeks ago         "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("127")]),e._v(" MB\n")])])]),s("p",[e._v("除此以外，"),s("code",[e._v("docker image ls")]),e._v(" 还支持强大的过滤器参数 "),s("code",[e._v("--filter")]),e._v("，或者简写 "),s("code",[e._v("-f")]),e._v("。之前我们已经看到了使用过滤器来列出虚悬镜像的用法，它还有更多的用法。比如，我们希望看到在 "),s("code",[e._v("mongo:3.2")]),e._v(" 之后建立的镜像，可以用下面的命令：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker image ls -f since=mongo:3.2")]),e._v("\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nredis               latest              5f515359c7f8        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(" days ago          "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("183")]),e._v(" MB\nnginx               latest              05a60462f8ba        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(" days ago          "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("181")]),e._v(" MB\n")])])]),s("p",[e._v("想查看某个位置之前的镜像也可以，只需要把 "),s("code",[e._v("since")]),e._v(" 换成 "),s("code",[e._v("before")]),e._v(" 即可。")]),e._v(" "),s("p",[e._v("此外，如果镜像构建时，定义了 "),s("code",[e._v("LABEL")]),e._v("，还可以通过 "),s("code",[e._v("LABEL")]),e._v(" 来过滤。")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker image ls -f label=com.example.version=0.1")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n")])])]),s("h4",{attrs:{id:"以特定格式显示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#以特定格式显示"}},[e._v("#")]),e._v(" 以特定格式显示")]),e._v(" "),s("p",[e._v("默认情况下，"),s("code",[e._v("docker image ls")]),e._v(" 会输出一个完整的表格，但是我们并非所有时候都会需要这些内容。比如，刚才删除虚悬镜像的时候，我们需要利用 "),s("code",[e._v("docker image ls")]),e._v(" 把所有的虚悬镜像的 ID 列出来，然后才可以交给 "),s("code",[e._v("docker image rm")]),e._v(" 命令作为参数来删除指定的这些镜像，这个时候就用到了 "),s("code",[e._v("-q")]),e._v(" 参数。")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker image ls -q")]),e._v("\n5f515359c7f8\n05a60462f8ba\nfe9198c04d62\n00285df0df87\nf753707788c5\nf753707788c5\n1e0c3dd64ccd\n")])])]),s("p",[s("code",[e._v("--filter")]),e._v(" 配合 "),s("code",[e._v("-q")]),e._v(" 产生出指定范围的 ID 列表，然后送给另一个 "),s("code",[e._v("docker")]),e._v(" 命令作为参数，从而针对这组实体成批的进行某种操作的做法在 Docker 命令行使用过程中非常常见，不仅仅是镜像，将来我们会在各个命令中看到这类搭配以完成很强大的功能。因此每次在文档看到过滤器后，可以多注意一下它们的用法。")]),e._v(" "),s("p",[e._v("另外一些时候，我们可能只是对表格的结构不满意，希望自己组织列；或者不希望有标题，这样方便其它程序解析结果等，这就用到了 "),s("a",{attrs:{href:"https://gohugo.io/templates/go-templates/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Go 的模板语法"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("p",[e._v("比如，下面的命令会直接列出镜像结果，并且只包含镜像ID和仓库名：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# docker image ls --format "{{.ID}}: {{.Repository}}"')]),e._v("\n5f515359c7f8: redis\n05a60462f8ba: nginx\nfe9198c04d62: mongo\n00285df0df87: "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\nf753707788c5: ubuntu\nf753707788c5: ubuntu\n1e0c3dd64ccd: ubuntu\n")])])]),s("p",[e._v("或者打算以表格等距显示，并且有标题行，和默认一样，不过自己定义列：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# docker image ls --format "table {{.ID}}\\t{{.Repository}}\\t{{.Tag}}"')]),e._v("\nIMAGE ID            REPOSITORY          TAG\n5f515359c7f8        redis               latest\n05a60462f8ba        nginx               latest\nfe9198c04d62        mongo               "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.2")]),e._v("\n00285df0df87        "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("              "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\nf753707788c5        ubuntu              "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("16.04")]),e._v("\nf753707788c5        ubuntu              latest\n1e0c3dd64ccd        ubuntu              "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("14.04")]),e._v("\n")])])]),s("h3",{attrs:{id:"_5-4-给镜像打标签-tag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-给镜像打标签-tag"}},[e._v("#")]),e._v(" 5.4 给镜像打标签（tag）")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker tag a187dde48cd2 docker.io/panyangyang/alpine:v3.11.5")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker images")]),e._v("\nREPOSITORY           TAG                 IMAGE ID            CREATED             SIZE\npanyangyang/alpine   v3.11.5             a187dde48cd2        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" weeks ago         "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(".6MB\nalpine               "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.10")]),e._v(".1              b7b28af77ffe        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("9")]),e._v(" months ago        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(".58MB\nhello-world          latest              fce289e99eb9        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("15")]),e._v(" months ago       "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(".84kB\n")])])]),s("h3",{attrs:{id:"_5-5-删除本地镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-删除本地镜像"}},[e._v("#")]),e._v(" 5.5 删除本地镜像")]),e._v(" "),s("p",[e._v("如果要删除本地的镜像，可以使用 "),s("code",[e._v("docker image rm")]),e._v(" 命令，其格式为：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker image rm [选项] <镜像1> [<镜像2> ...]")]),e._v("\n")])])]),s("p",[e._v("用 ID、镜像名、摘要删除镜像")]),e._v(" "),s("p",[e._v("其中，"),s("code",[e._v("<镜像>")]),e._v(" 可以是 "),s("code",[e._v("镜像短 ID")]),e._v("、"),s("code",[e._v("镜像长 ID")]),e._v("、"),s("code",[e._v("镜像名")]),e._v(" 或者 "),s("code",[e._v("镜像摘要")]),e._v("。")]),e._v(" "),s("p",[e._v("比如我们有这么一些镜像：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker image ls")]),e._v("\nREPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE\ncentos                      latest              0584b3d2cf6d        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v(" weeks ago         "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("196.5")]),e._v(" MB\nredis                       alpine              501ad78535f0        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v(" weeks ago         "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("21.03")]),e._v(" MB\ndocker                      latest              cf693ec9b5c7        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v(" weeks ago         "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("105.1")]),e._v(" MB\nnginx                       latest              e43d811ce2f4        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(" weeks ago         "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("181.5")]),e._v(" MB\n")])])]),s("p",[e._v("我们可以用镜像的完整 ID，也称为 "),s("code",[e._v("长 ID")]),e._v("，来删除镜像。使用脚本的时候可能会用长 ID，但是人工输入就太累了，所以更多的时候是用 "),s("code",[e._v("短 ID")]),e._v(" 来删除镜像。"),s("code",[e._v("docker image ls")]),e._v(" 默认列出的就已经是短 ID 了，一般取前3个字符以上，只要足够区分于别的镜像就可以了。")]),e._v(" "),s("p",[e._v("比如这里，如果我们要删除 "),s("code",[e._v("redis:alpine")]),e._v(" 镜像，可以执行：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker image rm 501")]),e._v("\nUntagged: redis:alpine\nUntagged: redis@sha256:f1ed3708f538b537eb9c2a7dd50dc90a706f7debd7e1196c9264edeea521a86d\nDeleted: sha256:501ad78535f015d88872e13fa87a828425117e3d28075d0c117932b05bf189b7\nDeleted: sha256:96167737e29ca8e9d74982ef2a0dda76ed7b430da55e321c071f0dbff8c2899b\nDeleted: sha256:32770d1dcf835f192cafd6b9263b7b597a1778a403a109e2cc2ee866f74adf23\nDeleted: sha256:127227698ad74a5846ff5153475e03439d96d4b1c7f2a449c7a826ef74a2d2fa\nDeleted: sha256:1333ecc582459bac54e1437335c0816bc17634e131ea0cc48daa27d32c75eab3\nDeleted: sha256:4fc455b921edf9c4aea207c51ab39b10b06540c8b4825ba57b3feed1668fa7c7\n")])])]),s("p",[e._v("我们也可以用"),s("code",[e._v("镜像名")]),e._v("，也就是 "),s("code",[e._v("<仓库名>:<标签>")]),e._v("，来删除镜像。")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker image rm centos")]),e._v("\nUntagged: centos:latest\nUntagged: centos@sha256:b2f9d1c0ff5f87a4743104d099a3d561002ac500db1b9bfa02a783a46e0d366c\nDeleted: sha256:0584b3d2cf6d235ee310cf14b54667d889887b838d3f3d3033acd70fc3c48b8a\nDeleted: sha256:97ca462ad9eeae25941546209454496e1d66749d53dfa2ee32bf1faabd239d38\n")])])]),s("p",[e._v("当然，更精确的是使用 "),s("code",[e._v("镜像摘要")]),e._v(" 删除镜像。")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker image ls --digests")]),e._v("\nREPOSITORY                  TAG                 DIGEST                                                                    IMAGE ID            CREATED             SIZE\nnode                        slim                sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228   6e0c4c8e3913        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v(" weeks ago         "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("214")]),e._v(" MB\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker image rm node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228")]),e._v("\nUntagged: node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228\n")])])]),s("p",[s("strong",[e._v("Untagged 和 Deleted")])]),e._v(" "),s("p",[e._v("如果观察上面这几个命令的运行输出信息的话，你会注意到删除行为分为两类，一类是 "),s("code",[e._v("Untagged")]),e._v("，另一类是 "),s("code",[e._v("Deleted")]),e._v("。我们之前介绍过，镜像的唯一标识是其 ID 和摘要，而一个镜像可以有多个标签。")]),e._v(" "),s("p",[e._v("因此当我们使用上面命令删除镜像的时候，实际上是在要求删除某个标签的镜像。所以首先需要做的是将满足我们要求的所有镜像标签都取消，这就是我们看到的 "),s("code",[e._v("Untagged")]),e._v(" 的信息。因为一个镜像可以对应多个标签，因此当我们删除了所指定的标签后，可能还有别的标签指向了这个镜像，如果是这种情况，那么 "),s("code",[e._v("Delete")]),e._v(" 行为就不会发生。所以并非所有的 "),s("code",[e._v("docker image rm")]),e._v(" 都会产生删除镜像的行为，有可能仅仅是取消了某个标签而已。")]),e._v(" "),s("p",[e._v("当该镜像所有的标签都被取消了，该镜像很可能会失去了存在的意义，因此会触发删除行为。镜像是多层存储结构，因此在删除的时候也是从上层向基础层方向依次进行判断删除。镜像的多层结构让镜像复用变动非常容易，因此很有可能某个其它镜像正依赖于当前镜像的某一层。这种情况，依旧不会触发删除该层的行为。直到没有任何层依赖当前层时，才会真实的删除当前层。这就是为什么，有时候会奇怪，为什么明明没有别的标签指向这个镜像，但是它还是存在的原因，也是为什么有时候会发现所删除的层数和自己 "),s("code",[e._v("docker pull")]),e._v(" 看到的层数不一样的源。")]),e._v(" "),s("p",[e._v("除了镜像依赖以外，还需要注意的是容器对镜像的依赖。如果有用这个镜像启动的容器存在（即使容器没有运行），那么同样不可以删除这个镜像。之前讲过，容器是以镜像为基础，再加一层容器存储层，组成这样的多层存储结构去运行的。因此该镜像如果被这个容器所依赖的，那么删除必然会导致故障。如果这些容器是不需要的，应该先将它们删除，然后再来删除镜像。")]),e._v(" "),s("p",[s("strong",[e._v("用 docker image ls 命令来配合")])]),e._v(" "),s("p",[e._v("像其它可以承接多个实体的命令一样，可以使用 "),s("code",[e._v("docker image ls -q")]),e._v(" 来配合使用 "),s("code",[e._v("docker image rm")]),e._v("，这样可以成批的删除希望删除的镜像。我们在“镜像列表”章节介绍过很多过滤镜像列表的方式都可以拿过来使用。")]),e._v(" "),s("p",[e._v("比如，我们需要删除所有仓库名为 "),s("code",[e._v("redis")]),e._v(" 的镜像：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker image rm $(docker image ls -q redis)")]),e._v("\n")])])]),s("p",[e._v("或者删除所有在 "),s("code",[e._v("mongo:3.2")]),e._v(" 之前的镜像：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker image rm $(docker image ls -q -f before=mongo:3.2)")]),e._v("\n")])])]),s("p",[e._v("充分利用你的想象力和 Linux 命令行的强大，你可以完成很多非常赞的功能")]),e._v(" "),s("h2",{attrs:{id:"第-6-章-docker-镜像特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第-6-章-docker-镜像特性"}},[e._v("#")]),e._v(" 第 6 章 Docker 镜像特性")]),e._v(" "),s("h3",{attrs:{id:"_6-1-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-概述"}},[e._v("#")]),e._v(" 6.1 概述")]),e._v(" "),s("p",[s("img",{attrs:{src:a(362),alt:""}})]),e._v(" "),s("p",[e._v("容器创建是需要指定使用的镜像，每个镜像都由唯一的标识Image ID，默认是128位，可以使用前16位作为缩略形式，也可以使用镜像镜像名和版本号两个部分组合成唯一表示，例如nginx:latest，如果省略版本号，默认使用的是最新版本标签，也就是latest，所以如果默认直接写nginx，其实系统执行的实际命令就是nginx:latest。")]),e._v(" "),s("h3",{attrs:{id:"_6-2-docker-文件系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-docker-文件系统"}},[e._v("#")]),e._v(" 6.2 Docker 文件系统")]),e._v(" "),s("p",[e._v("Linux系统包含内核空间"),s("code",[e._v("kernal")]),e._v("和用户空间"),s("code",[e._v("rootfs")]),e._v("两部分，Docker容器只使用各自的"),s("code",[e._v("rootfs")]),e._v("但共用主机"),s("code",[e._v("host")]),e._v("的内核"),s("code",[e._v("kernal")]),e._v("，这样就产生了镜像结构分层。")]),e._v(" "),s("p",[s("code",[e._v("rootfs")]),e._v("是Docker容器在启动时内部进程可见的文件系统，也就是Docker容器的根目录。"),s("code",[e._v("rootfs")]),e._v("包含一个操作系统运行所需的文件系统。例如：可能包含典型类UNIX系统中的目录系统"),s("code",[e._v("/dev/")]),e._v("、"),s("code",[e._v("/proc")]),e._v("、"),s("code",[e._v("/bin")]),e._v("、"),s("code",[e._v("/etc")]),e._v("、"),s("code",[e._v("/usr")]),e._v("、"),s("code",[e._v("/tmp")]),e._v("...及运行Docker容器所需的配置文件、工具等。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(363),alt:""}})]),e._v(" "),s("p",[e._v("rootfs")]),e._v(" "),s("p",[e._v("在传统Linux内核启动时，首先会挂载一个只读的"),s("code",[e._v("rootfs")]),e._v("，当系统检测其完整性之后，再将其切换为读写模式。而在Docker架构中，当"),s("code",[e._v("docker daemon")]),e._v("为Docker容器改在"),s("code",[e._v("rootfs")]),e._v("时，会沿用Linux内核启动时的做法，也就是将"),s("code",[e._v("rootfs")]),e._v("设置为只读模式。当挂载完毕后，利用联合挂载"),s("code",[e._v("union mount")]),e._v("技术在已有的只读"),s("code",[e._v("rootfs")]),e._v("上再挂载一个读写层。这样，可读写的层处于Docker容器文件系统的最顶层，其下可能联合挂载了多个只读的层，只有在Docker容器运行过程中文件系统发生变化时，才会把变化的文件内容写到可读写层，并隐藏只读层中的旧版本文件。")]),e._v(" "),s("p",[e._v("由于所有Docker容器都共用"),s("code",[e._v("host")]),e._v("主机的"),s("code",[e._v("kernal")]),e._v("内核，所以在容器中是不能对Linux内核"),s("code",[e._v("kernal")]),e._v("进行升级的。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(364),alt:""}})]),e._v(" "),s("p",[e._v("所有Docker容器都共用host主机的kernal内核")]),e._v(" "),s("p",[e._v("Docker支持通过扩展现有镜像来创建新的镜像，实际上Docker Hub中99%的镜像都是通过在Base镜像中安装和配置需要的软件构建出来的。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(365),alt:""}})]),e._v(" "),s("p",[e._v("Docker支持通过扩展现有镜像来创建新的镜像")]),e._v(" "),s("p",[e._v("一个Docker镜像"),s("code",[e._v("Images")]),e._v("由多个可读的镜像层"),s("code",[e._v("Read Layer")]),e._v("，然后运行的容器会在这个Docker的镜像上多加一层可写的容器层"),s("code",[e._v("Read-Write Layer")]),e._v("，任何对文件的更改都只存在于此容器层，因此任何对容器的操作均不会影响到镜像。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(366),alt:""}})]),e._v(" "),s("p",[e._v("Docker分层结构")]),e._v(" "),s("p",[e._v("容器是如何获取镜像层文件而又不影响镜像层的呢？")]),e._v(" "),s("p",[e._v("Docker中如果需要获取某个文件，容器层会从上到下去下一层的镜像层中去获取文件，如果该层文件不存在，那么就会去下一层镜像中寻找，直到最后一层。对于用户而言，用户面对的是一个叠加后的文件系统。")]),e._v(" "),s("p",[e._v("任何对于文件的操作都会记录在容器层，例如：修改文件时容器层会把在镜像层找到的文件拷贝到容器层然后进行修改，删除文件时则会在容器层内记录删除文件的条目。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(367),alt:""}})]),e._v(" "),s("p",[e._v("容器层会从上到下去下一层的镜像层中去获取文件")]),e._v(" "),s("p",[e._v("当容器启动时，一个新的可写层"),s("code",[e._v("writable")]),e._v("被加载到镜像的顶部，这一层通常被称为容器层"),s("code",[e._v("container")]),e._v("，容器层之下的都叫做镜像层。")]),e._v(" "),s("p",[e._v("典型的Linux在启动后，会将"),s("code",[e._v("rootfs")]),e._v("置为只读"),s("code",[e._v("readonly")]),e._v("并进行一些列检查，然后将其切换为可读写"),s("code",[e._v("readwrite")]),e._v("供用户使用。在Docker中起初也是将"),s("code",[e._v("rootfs")]),e._v("以只读的"),s("code",[e._v("readonly")]),e._v("的方式加载并检查，然后接下来利用"),s("code",[e._v("union mount")]),e._v("联合挂载将一个"),s("code",[e._v("readwrite")]),e._v("文件系统挂载在"),s("code",[e._v("readonly")]),e._v("的"),s("code",[e._v("rootfs")]),e._v("之上，并且允许再次将下层的文件系统设定为只读"),s("code",[e._v("readonly")]),e._v("，并向上叠加。这样一组只读"),s("code",[e._v("readonly")]),e._v("和一个可写"),s("code",[e._v("writeable")]),e._v("的结果就构成了一个容器"),s("code",[e._v("container")]),e._v("的运行目录，每个镜像被称为一层"),s("code",[e._v("layer")]),e._v("。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(368),alt:""}})]),e._v(" "),s("p",[e._v("Docker镜像为什么要采用分层结果呢？")]),e._v(" "),s("ul",[s("li",[e._v("每个软件都是基于某个镜像去运行的，因此一旦某个底层环境出现问题，就不需要去修改全部基于该镜像的软件的镜像，只需要修改底层环境的镜像。")]),e._v(" "),s("li",[e._v("共享资源，其它相同环境的软件镜像都共同去享用同一个环境镜像，而不需要每个软件镜像要去创建一个底层环境。")])]),e._v(" "),s("h2",{attrs:{id:"第-7-章-docker-容器操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第-7-章-docker-容器操作"}},[e._v("#")]),e._v(" 第 7 章 Docker 容器操作")]),e._v(" "),s("h3",{attrs:{id:"_7-1-启动容器-运行镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-启动容器-运行镜像"}},[e._v("#")]),e._v(" 7.1 启动容器（运行镜像）")]),e._v(" "),s("p",[e._v("启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（"),s("code",[e._v("stopped")]),e._v("）的容器重新启动。")]),e._v(" "),s("p",[e._v("因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。")]),e._v(" "),s("blockquote",[s("p",[e._v("docker run 是日常用的最频繁的命令之一，同样也是较为复杂的命令之一")]),e._v(" "),s("p",[e._v("命令格式：docker run [OPTIONS] IMAGE [COMMAND] [ARG...]")]),e._v(" "),s("p",[e._v("OPTIONS: 选项")]),e._v(" "),s("p",[e._v("-i：表示启动一个可交互的容器，并持续打开标准输入")]),e._v(" "),s("p",[e._v("-t：表示使用终端关联到容器的标准输入输出上")]),e._v(" "),s("p",[e._v("-d：表示将容器放置在后台运行")]),e._v(" "),s("p",[e._v("--rm：退出后即删除容器")]),e._v(" "),s("p",[e._v("--name：表示定义容器的唯一名称")]),e._v(" "),s("p",[e._v("IMAGE：表示要运行的镜像")]),e._v(" "),s("p",[e._v("COMMAD：表示启动容器时要运行的命令")]),e._v(" "),s("p",[e._v("ARG: 参数")])]),e._v(" "),s("h4",{attrs:{id:"_7-1-1-交互式新建并启动一个容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-1-交互式新建并启动一个容器"}},[e._v("#")]),e._v(" 7.1.1 交互式新建并启动一个容器")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker images | grep alpine")]),e._v("\nalpine              "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.10")]),e._v(".1              b7b28af77ffe        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("9")]),e._v(" months ago        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(".58MB\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker run -it alpine:3.10.1 /bin/sh")]),e._v("\n/ "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ip addr")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(": lo: "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("LOOPBACK,UP,LOWER_UP"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" mtu "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("65536")]),e._v(" qdisc noqueue state UNKNOWN qlen "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1000")]),e._v("\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1/8 scope "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("host")]),e._v(" lo\n       valid_lft forever preferred_lft forever\n"),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v(": eth0@if11: "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" mtu "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1500")]),e._v(" qdisc noqueue state UP\n    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff\n    inet "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("172.17")]),e._v(".0.2/16 brd "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("172.17")]),e._v(".255.255 scope global eth0\n       valid_lft forever preferred_lft forever\n/ "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# cat /etc/issue")]),e._v("\nWelcome to Alpine Linux "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.10")]),e._v("\nKernel "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("r on an "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("m "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n/ "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# exit")]),e._v("\n")])])]),s("h4",{attrs:{id:"_7-1-2-非交互式启动一个容器-退出即删除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-2-非交互式启动一个容器-退出即删除"}},[e._v("#")]),e._v(" 7.1.2 非交互式启动一个容器（退出即删除）")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker run --rm alpine:3.10.1 /bin/echo helloword")]),e._v("\nhelloword\n")])])]),s("h4",{attrs:{id:"_7-1-3-非交互式启动一个后台运行容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-3-非交互式启动一个后台运行容器"}},[e._v("#")]),e._v(" 7.1.3 非交互式启动一个后台运行容器")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker run -d --name myalpine alpine:3.10.1 /bin/sleep 300")]),e._v("\n5b9ef79b22e0b341c60db85ee443cb14deff85a41c2fb9e0abd00405e6c445bd\n")])])]),s("blockquote",[s("p",[e._v("300秒后自动结束")])]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker ps -a")]),e._v("\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES\n5b9ef79b22e0        alpine:3.10.1       "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/bin/sleep 300"')]),e._v("    "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("52")]),e._v(" seconds ago      Up "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("51")]),e._v(" seconds                                  myalpine\n3f656d915af5        alpine:3.10.1       "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/bin/sh"')]),e._v("           "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v(" minutes ago      Exited "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),e._v(" minutes ago                       sad_sutherland\nd6cea5dc8306        hello-world         "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/hello"')]),e._v("            "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" days ago          Exited "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" days ago                          upbeat_gagarin\n5f481479f560        hello-world         "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/hello"')]),e._v("            "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" days ago          Exited "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" days ago                          vibrant_jang\n")])])]),s("h3",{attrs:{id:"_7-2-查看容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-查看容器"}},[e._v("#")]),e._v(" 7.2 查看容器")]),e._v(" "),s("h4",{attrs:{id:"_7-2-1-查看运行中的容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-1-查看运行中的容器"}},[e._v("#")]),e._v(" 7.2.1 查看运行中的容器")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker ps")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker container ls")]),e._v("\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n8fa336f37fce        alpine:3.10.1       "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/bin/sleep 300"')]),e._v("    "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v(" seconds ago       Up "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" seconds                            myalpine1\n")])])]),s("h4",{attrs:{id:"_7-2-2-查看所有容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-2-查看所有容器"}},[e._v("#")]),e._v(" 7.2.2 查看所有容器")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker ps -a")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker container ls -a")]),e._v("\nCONTAINER ID        IMAGE               COMMAND             CREATED              STATUS                      PORTS               NAMES\n8fa336f37fce        alpine:3.10.1       "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/bin/sleep 300"')]),e._v("    About a minute ago   Up About a minute                               myalpine1\n5b9ef79b22e0        alpine:3.10.1       "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/bin/sleep 300"')]),e._v("    "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("20")]),e._v(" minutes ago       Exited "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("15")]),e._v(" minutes ago                       myalpine\n3f656d915af5        alpine:3.10.1       "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/bin/sh"')]),e._v("           "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("30")]),e._v(" minutes ago       Exited "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("28")]),e._v(" minutes ago                       sad_sutherland\nd6cea5dc8306        hello-world         "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/hello"')]),e._v("            "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" days ago           Exited "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" days ago                           upbeat_gagarin\n5f481479f560        hello-world         "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/hello"')]),e._v("            "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" days ago           Exited "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" days ago                           vibrant_jang\n")])])]),s("h4",{attrs:{id:"_7-2-3-查看docker在宿主机上的进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-3-查看docker在宿主机上的进程"}},[e._v("#")]),e._v(" 7.2.3 查看docker在宿主机上的进程")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ps aux | grep sleep | grep -v grep")]),e._v("\nroot      "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("8204")]),e._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.0")]),e._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.0")]),e._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1540")]),e._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("248")]),e._v(" ?        Ss   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("22")]),e._v(":37   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(":00 /bin/sleep "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("300")]),e._v("\n")])])]),s("h3",{attrs:{id:"_7-3-进入容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-进入容器"}},[e._v("#")]),e._v(" 7.3 进入容器")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker exec -it c41274eb760f /bin/sh")]),e._v("\n/ "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ps aux")]),e._v("\nPID   "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("USER")]),e._v("     TIME  COMMAND\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" root      "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(":00 /bin/sleep "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("300")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("6")]),e._v(" root      "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(":00 /bin/sh\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("11")]),e._v(" root      "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(":00 "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ps")]),e._v(" aux\n/ "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n\n")])])]),s("h3",{attrs:{id:"_7-4-停止-启动-重启容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-停止-启动-重启容器"}},[e._v("#")]),e._v(" 7.4 停止/启动/重启容器")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 停止容器")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker stop myalpine2")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker container stop myalpine2")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 启动容器")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker start myalpine2")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker container start myalpine2")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 重启容器")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker restart myalpine2")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker container restart myalpine2")]),e._v("\n\n")])])]),s("blockquote",[s("p",[e._v("上面操作可以使用 容器名称（NAMES) 或 容器ID（CONTAINER ID)")])]),e._v(" "),s("h3",{attrs:{id:"_7-5-删除容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-删除容器"}},[e._v("#")]),e._v(" 7.5 删除容器")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker rm myalpine1")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker container rm myalpine1")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 如果要删除一个运行中的容器，可以添加 -f 参数。Docker 会发送 SIGKILL 信号给容器。")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker rm -f myalpine2")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker container rm -f myalpine1")]),e._v("\n")])])]),s("p",[e._v("用 "),s("code",[e._v("docker container ls -a")]),e._v(" 命令可以查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。")]),e._v(" "),s("h4",{attrs:{id:"常用清除-docker-中容器状态为-exited-的容器脚本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用清除-docker-中容器状态为-exited-的容器脚本"}},[e._v("#")]),e._v(" 常用清除 docker 中容器状态为 "),s("code",[e._v("Exited")]),e._v(" 的容器脚本")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# for i in `docker ps -a|grep -i exit|awk '{print $1}'`;do docker rm -f $i;done")]),e._v("\n3f656d915af5\nd6cea5dc8306\n5f481479f560\n")])])]),s("h4",{attrs:{id:"清理所有处于终止状态的容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#清理所有处于终止状态的容器"}},[e._v("#")]),e._v(" 清理所有处于终止状态的容器")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker container prune")]),e._v("\n")])])]),s("h3",{attrs:{id:"_7-6-修改-提交容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-修改-提交容器"}},[e._v("#")]),e._v(" 7.6 修改/提交容器")]),e._v(" "),s("h4",{attrs:{id:"_7-5-1-修改容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-1-修改容器"}},[e._v("#")]),e._v(" 7.5.1 修改容器")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker exec -it 5b9ef79b22e0 /bin/sh")]),e._v("\n/ "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# pwd")]),e._v("\n/\n/ "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ls")]),e._v("\nbin    dev    etc    home   lib    media  mnt    opt    proc   root   run    sbin   srv    sys    tmp    usr    var\n/ "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# echo hello > a.txt")]),e._v("\n/ "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ls")]),e._v("\na.txt  bin    dev    etc    home   lib    media  mnt    opt    proc   root   run    sbin   srv    sys    tmp    usr    var\n")])])]),s("blockquote",[s("p",[e._v("a.txt 被写入到容器的 writable 层，它会保存一直都容器结束，再重启容器就会被清除")])]),e._v(" "),s("h4",{attrs:{id:"_7-6-2-提交容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-2-提交容器"}},[e._v("#")]),e._v(" 7.6.2 提交容器")]),e._v(" "),s("blockquote",[s("p",[e._v("**docker commit 😗*从容器创建一个新的镜像。")]),e._v(" "),s("p",[e._v("语法：")]),e._v(" "),s("p",[e._v("docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]")]),e._v(" "),s("p",[e._v("OPTIONS说明：")]),e._v(" "),s("ul",[s("li",[e._v("**-a 😗*提交的镜像作者；啊")]),e._v(" "),s("li",[e._v("**-c 😗*使用Dockerfile指令来创建镜像；")]),e._v(" "),s("li",[e._v("**-m 😗*提交时的说明文字；")]),e._v(" "),s("li",[e._v("**-p 😗*在commit时，将容器暂停。")])])]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker commit -p myalpine myalpine:v3.10.2_with_a.txt")]),e._v("\nsha256:4cbb40d64f7242278f816063e64b4d650a59d32cdcc98b734b18090ef5668a6e\n")])])]),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker images")]),e._v("\nREPOSITORY          TAG                  IMAGE ID            CREATED             SIZE\nmyalpine            v3.10.2_with_a.txt   4cbb40d64f72        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),e._v(" seconds ago       "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(".58MB\nalpine              "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.10")]),e._v(".1               b7b28af77ffe        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("9")]),e._v(" months ago        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(".58MB\nhello-world         latest               fce289e99eb9        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("15")]),e._v(" months ago       "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(".84kB\n")])])]),s("h3",{attrs:{id:"_7-7-导出-导入镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-7-导出-导入镜像"}},[e._v("#")]),e._v(" 7.7 导出/导入镜像")]),e._v(" "),s("h4",{attrs:{id:"_7-7-1-导出镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-7-1-导出镜像"}},[e._v("#")]),e._v(" 7.7.1 导出镜像")]),e._v(" "),s("blockquote",[s("p",[e._v("打包本地镜像")]),e._v(" "),s("p",[e._v("docker save [ 镜像名 or 镜像 id ] > [ 文件路径 ]")])]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker images")]),e._v("\nREPOSITORY          TAG                  IMAGE ID            CREATED             SIZE\nmyalpine            v3.10.2_with_a.txt   4cbb40d64f72        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v(" minutes ago       "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(".58MB\nalpine              "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.10")]),e._v(".1               b7b28af77ffe        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("9")]),e._v(" months ago        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(".58MB\nhello-world         latest               fce289e99eb9        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("15")]),e._v(" months ago       "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(".84kB\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker save 4cbb40d64f72 > myalipine:v3.10.2_with_a.txt.tar")]),e._v("\n")])])]),s("h4",{attrs:{id:"_7-7-2-导入镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-7-2-导入镜像"}},[e._v("#")]),e._v(" 7.7.2 导入镜像")]),e._v(" "),s("blockquote",[s("p",[e._v("导入镜像")]),e._v(" "),s("p",[e._v("docker load < [ 文件路径 ]")]),e._v(" "),s("p",[e._v("修改镜像tag")]),e._v(" "),s("p",[e._v("docker tag [ 镜像名 or 镜像 id ] [ 新镜像名 ]:[ 新 tag ]")])]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker load < alpine\\:v3.10.1_back.tar")]),e._v("\nLoaded image ID: sha256:b7b28af77ffec6054d13378df4fdf02725830086c7444d9c278af25312aa39b9\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker images")]),e._v("\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("              "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("              b7b28af77ffe        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("9")]),e._v(" months ago        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(".58MB\nhello-world         latest              fce289e99eb9        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("15")]),e._v(" months ago       "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(".84kB\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker tag b7b28af77ffe alipine:v3.10.1")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker images")]),e._v("\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nalipine             v3.10.1             b7b28af77ffe        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("9")]),e._v(" months ago        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(".58MB\nhello-world         latest              fce289e99eb9        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("15")]),e._v(" months ago       "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(".84kB\n")])])]),s("h3",{attrs:{id:"_7-8-查看容器日志"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-查看容器日志"}},[e._v("#")]),e._v(" 7.8 查看容器日志")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker run hello-world 2>&1 >>/dev/null")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker ps -a|grep hello")]),e._v("\n14ea2fcb0e98        hello-world         "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/hello"')]),e._v("            "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("12")]),e._v(" seconds ago      Exited "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("11")]),e._v(" seconds ago                       youthful_brahmagupta\n34674d3c7f92        hello-world         "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/hello"')]),e._v("            "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("57")]),e._v(" seconds ago      Exited "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("56")]),e._v(" seconds ago                       gallant_carson\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker logs -f 14ea2fcb0e98")]),e._v("\n\nHello from Docker"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v("\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(". The Docker client contacted the Docker daemon.\n "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(". The Docker daemon pulled the "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"hello-world"')]),e._v(" image from the Docker Hub.\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("amd64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v(". The Docker daemon created a new container from that image "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("which")]),e._v(" runs the\n    executable that produces the output you are currently reading.\n "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(". The Docker daemon streamed that output to the Docker client, "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("which")]),e._v(" sent it\n    to your terminal.\n\nTo try something "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("more")]),e._v(" ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("bash")]),e._v("\n\nShare images, automate workflows, and "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("more")]),e._v(" with a "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("free")]),e._v(" Docker ID:\n https://hub.docker.com/\n\nFor "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("more")]),e._v(" examples and ideas, visit:\n https://docs.docker.com/get-started/\n\n")])])]),s("blockquote",[s("p",[s("strong",[e._v("1、文件描述符")]),e._v("\nLinux系统预留可三个文件描述符：0、1和2，他们的意义如下所示：\n0——标准输入（stdin）\n1——标准输出（stdout）\n2——标准错误（stderr）")]),e._v(" "),s("p",[s("strong",[e._v("2、区别")])]),e._v(" "),s("p",[e._v("2>/dev/null\n意思就是把错误输出到“黑洞”")]),e._v(" "),s("p",[e._v("/dev/null 2>&1\n默认情况是1，也就是等同于1>/dev/null 2>&1。意思就是把标准输出重定向到“黑洞”，还把错误输出2重定向到标准输出1，也就是标准输出和错误输出都进了“黑洞”")]),e._v(" "),s("p",[e._v("2>&1 >/dev/null\n意思就是把错误输出2重定向到标准出书1，也就是屏幕，标准输出进了“黑洞”，也就是标准输出进了黑洞，错误输出打印到屏幕")])]),e._v(" "),s("h2",{attrs:{id:"第-8-章-docker-容器的高级操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第-8-章-docker-容器的高级操作"}},[e._v("#")]),e._v(" 第 8 章 Docker 容器的高级操作")]),e._v(" "),s("h3",{attrs:{id:"_8-1-映射端口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-映射端口"}},[e._v("#")]),e._v(" 8.1 映射端口")]),e._v(" "),s("blockquote",[s("p",[e._v("映射端口")]),e._v(" "),s("p",[e._v("docker run -p 容器外端口(hostPort):容器内端口(containerPort) 可指定多个")])]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker run --name mynginx -d -p81:80 panyangyang/nginx:v1.12.2")]),e._v("\n089698e2901c289dcbf9fd925c7ba4b941b98ba8ae590104c94c35e7d1020970\n")])])]),s("h3",{attrs:{id:"_8-2-挂载数据卷"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-挂载数据卷"}},[e._v("#")]),e._v(" 8.2 挂载数据卷")]),e._v(" "),s("blockquote",[s("p",[e._v("挂载数据卷")]),e._v(" "),s("p",[e._v("docker run -v 容器外目录:容器内目录")])]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# mkdir html")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# cd html/")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# wget www.baidu.com -O index.html")]),e._v("\n--2020-04-10 "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("14")]),e._v(":53:32--  http://www.baidu.com/\n正在解析主机 www.baidu.com "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("www.baidu.com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(". "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("61.135")]),e._v(".169.121, "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("61.135")]),e._v(".169.125, "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2408")]),e._v(":80f0:410c:1d:0:ff:b07a:39af, "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n正在连接 www.baidu.com "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("www.baidu.com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("61.135")]),e._v(".169.121"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(":80"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(". 已连接。\n已发出 HTTP 请求，正在等待回应"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(". "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("200")]),e._v(" OK\n长度：2381 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(".3K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("text/html"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n正在保存至: “index.html”\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("100")]),e._v("%"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2,381")]),e._v("       --.-K/s 用时 0s      \n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2020")]),e._v("-04-10 "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("14")]),e._v(":53:32 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("179")]),e._v(" MB/s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" - 已保存 “index.html” "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2381")]),e._v("/2381"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker run -d --name nginx_with_baidu -d -p8100:8100 -v/root/html:/usr/share/nginx/html panyangyang/nginx:v1.12.2")]),e._v("\n40564e2f9b37f870df785ff78fa16ef9e6bbcf6016b68a0be62ba545e0e463ff\n")])])]),s("h3",{attrs:{id:"_8-3-传递环境变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-传递环境变量"}},[e._v("#")]),e._v(" 8.3 传递环境变量")]),e._v(" "),s("blockquote",[s("p",[e._v("传递环境变量")]),e._v(" "),s("p",[e._v("docker run -e 环境变量名=环境变量值")])]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker run --rm -e E_OPTS=abc alipine:v3.10.1 printenv")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("PATH")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("HOSTNAME")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("f61a865a517c\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("E_OPTS")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("abc\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("HOME")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/root\n")])])]),s("h2",{attrs:{id:"第-9-章-容器的生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第-9-章-容器的生命周期"}},[e._v("#")]),e._v(" 第 9 章 容器的生命周期")]),e._v(" "),s("ul",[s("li",[e._v("检查本地是否存在镜像，如果不存在即从远端仓库检索")]),e._v(" "),s("li",[e._v("利用镜像启动容器")]),e._v(" "),s("li",[e._v("分配一个文件系统，并在只读的镜像层外挂一层可读写层")]),e._v(" "),s("li",[e._v("从宿主机配置的网桥接口中桥接一个虚拟接口到容器")]),e._v(" "),s("li",[e._v("从地址池配置一个 ip 地址给容器")]),e._v(" "),s("li",[e._v("执行用户指定的指令")]),e._v(" "),s("li",[e._v("执行完毕后容器终止")])]),e._v(" "),s("p",[s("img",{attrs:{src:a(369),alt:""}})]),e._v(" "),s("h2",{attrs:{id:"第-10-章-docker-commit-定制镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第-10-章-docker-commit-定制镜像"}},[e._v("#")]),e._v(" 第 10 章 Docker commit 定制镜像")]),e._v(" "),s("h3",{attrs:{id:"_10-1-利用-docker-commit-理解镜像构成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-利用-docker-commit-理解镜像构成"}},[e._v("#")]),e._v(" 10.1 利用 docker commit 理解镜像构成")]),e._v(" "),s("p",[e._v("注意： "),s("code",[e._v("docker commit")]),e._v(" 命令除了学习之外，还有一些特殊的应用场合，比如被入侵后保存现场等。但是，不要使用 "),s("code",[e._v("docker commit")]),e._v(" 定制镜像，定制镜像应该使用 "),s("code",[e._v("Dockerfile")]),e._v(" 来完成。如果你想要定制镜像请查看下一小节。")]),e._v(" "),s("p",[e._v("镜像是容器的基础，每次执行 "),s("code",[e._v("docker run")]),e._v(" 的时候都会指定哪个镜像作为容器运行的基础。在之前的例子中，我们所使用的都是来自于 Docker Hub 的镜像。直接使用这些镜像是可以满足一定的需求，而当这些镜像无法直接满足需求时，我们就需要定制这些镜像。接下来的几节就将讲解如何定制镜像。")]),e._v(" "),s("p",[e._v("回顾一下之前我们学到的知识，镜像是多层存储，每一层是在前一层的基础上进行的修改；而容器同样也是多层存储，是在以镜像为基础层，在其基础上加一层作为容器运行时的存储层。")]),e._v(" "),s("p",[e._v("现在让我们以定制一个 Web 服务器为例子，来讲解镜像是如何构建的。")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker run --name webserver -d -p 80:80 nginx")]),e._v("\n")])])]),s("p",[e._v("这条命令会用 "),s("code",[e._v("nginx")]),e._v(" 镜像启动一个容器，命名为 "),s("code",[e._v("webserver")]),e._v("，并且映射了 80 端口，这样我们可以用浏览器去访问这个 "),s("code",[e._v("nginx")]),e._v(" 服务器。")]),e._v(" "),s("p",[e._v("直接用浏览器访问的话，我们会看到默认的 Nginx 欢迎页面。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(370),alt:""}})]),e._v(" "),s("p",[e._v("现在，假设我们非常不喜欢这个欢迎页面，我们希望改成欢迎 Docker 的文字，我们可以使用 "),s("code",[e._v("docker exec")]),e._v(" 命令进入容器，修改其内容。")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker exec -it webserver bash")]),e._v("\nroot@3729b97e8226:/"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html")]),e._v("\nroot@3729b97e8226:/"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# exit")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exit")]),e._v("\n")])])]),s("p",[e._v("我们以交互式终端方式进入 "),s("code",[e._v("webserver")]),e._v(" 容器，并执行了 "),s("code",[e._v("bash")]),e._v(" 命令，也就是获得一个可操作的 Shell。")]),e._v(" "),s("p",[e._v("然后，我们用 "),s("code",[e._v("Hello, Docker!")]),e._v(" 覆盖了 "),s("code",[e._v("/usr/share/nginx/html/index.html")]),e._v(" 的内容。")]),e._v(" "),s("p",[e._v("现在我们再刷新浏览器的话，会发现内容被改变了。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(371),alt:""}})]),e._v(" "),s("p",[e._v("我们修改了容器的文件，也就是改动了容器的存储层。我们可以通过 "),s("code",[e._v("docker diff")]),e._v(" 命令看到具体的改动。")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker diff webserver")]),e._v("\nC /root\nA /root/.bash_history\nC /run\nC /usr\nC /usr/share\nC /usr/share/nginx\nC /usr/share/nginx/html\nC /usr/share/nginx/html/index.html\nC /var\nC /var/cache\nC /var/cache/nginx\nA /var/cache/nginx/client_temp\nA /var/cache/nginx/fastcgi_temp\nA /var/cache/nginx/proxy_temp\nA /var/cache/nginx/scgi_temp\nA /var/cache/nginx/uwsgi_temp\n")])])]),s("p",[e._v("现在我们定制好了变化，我们希望能将其保存下来形成镜像。")]),e._v(" "),s("p",[e._v("要知道，当我们运行一个容器的时候（如果不使用卷的话），我们做的任何文件修改都会被记录于容器存储层里。而 Docker 提供了一个 "),s("code",[e._v("docker commit")]),e._v(" 命令，可以将容器的存储层保存下来成为镜像。换句话说，就是在原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像。以后我们运行这个新镜像的时候，就会拥有原有容器最后的文件变化。")]),e._v(" "),s("p",[s("code",[e._v("docker commit")]),e._v(" 的语法格式为：")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("docker commit "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("选项"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("容器ID或容器名"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("仓库名"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("标签"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),s("p",[e._v("我们可以用下面的命令将容器保存为镜像：")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker commit \\")]),e._v("\n    --author "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"xxxxx@gmail.com>"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --message "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"修改了默认网页"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    webserver "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    nginx:v2\nsha256:07e33465974800ce65751acc279adc6ed2dc5ed4e0838f8b86f0c87aa1795214\n")])])]),s("p",[e._v("其中 "),s("code",[e._v("--author")]),e._v(" 是指定修改的作者，而 "),s("code",[e._v("--message")]),e._v(" 则是记录本次修改的内容。这点和 "),s("code",[e._v("git")]),e._v(" 版本控制相似，不过这里这些信息可以省略留空。")]),e._v(" "),s("p",[e._v("我们可以在 "),s("code",[e._v("docker image ls")]),e._v(" 中看到这个新定制的镜像：")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker image ls nginx")]),e._v("\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nnginx               v2                  07e334659748        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("9")]),e._v(" seconds ago       "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("181.5")]),e._v(" MB\nnginx               "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.11")]),e._v("                05a60462f8ba        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("12")]),e._v(" days ago         "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("181.5")]),e._v(" MB\nnginx               latest              e43d811ce2f4        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" weeks ago         "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("181.5")]),e._v(" MB\n")])])]),s("p",[e._v("我们还可以用 "),s("code",[e._v("docker history")]),e._v(" 具体查看镜像内的历史记录，如果比较 "),s("code",[e._v("nginx:latest")]),e._v(" 的历史记录，我们会发现新增了我们刚刚提交的这一层。")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker history nginx:v2")]),e._v("\nIMAGE               CREATED             CREATED BY                                      SIZE                COMMENT\n07e334659748        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("54")]),e._v(" seconds ago      nginx -g daemon off"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("                            "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("95")]),e._v(" B                修改了默认网页\ne43d811ce2f4        "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" weeks ago         /bin/sh -c "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#(nop)  CMD ["nginx" "-g" "daemon    0 B')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("missing"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("           "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" weeks ago         /bin/sh -c "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#(nop)  EXPOSE 443/tcp 80/tcp        0 B")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("missing"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("           "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" weeks ago         /bin/sh -c "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ln")]),e._v(" -sf /dev/stdout /var/log/nginx/   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("22")]),e._v(" B\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("missing"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("           "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" weeks ago         /bin/sh -c apt-key adv --keyserver hkp://pgp.   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("58.46")]),e._v(" MB\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("missing"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("           "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" weeks ago         /bin/sh -c "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#(nop)  ENV NGINX_VERSION=1.11.5-1   0 B")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("missing"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("           "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" weeks ago         /bin/sh -c "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#(nop)  MAINTAINER NGINX Docker Ma   0 B")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("missing"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("           "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" weeks ago         /bin/sh -c "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#(nop)  CMD ["/bin/bash"]            0 B')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("missing"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("           "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" weeks ago         /bin/sh -c "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#(nop) ADD file:23aa4f893e3288698c   123 MB")]),e._v("\n")])])]),s("p",[e._v("新的镜像定制好后，我们可以来运行这个镜像。")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("docker run --name web2 -d -p "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("81")]),e._v(":80 nginx:v2\n")])])]),s("p",[e._v("这里我们命名为新的服务为 "),s("code",[e._v("web2")]),e._v("，并且映射到 "),s("code",[e._v("81")]),e._v(" 端口。如果是 Docker for Mac/Windows 或 Linux 桌面的话，我们就可以直接访问 "),s("a",{attrs:{href:"http://localhost:81/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://localhost:81"),s("OutboundLink")],1),e._v(" 看到结果，其内容应该和之前修改后的 "),s("code",[e._v("webserver")]),e._v(" 一样。")]),e._v(" "),s("p",[e._v("至此，我们第一次完成了定制镜像，使用的是 "),s("code",[e._v("docker commit")]),e._v(" 命令，手动操作给旧的镜像添加了新的一层，形成新的镜像，对镜像多层存储应该有了更直观的感觉。")]),e._v(" "),s("h3",{attrs:{id:"_10-2-慎用-docker-commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-慎用-docker-commit"}},[e._v("#")]),e._v(" 10.2 慎用 "),s("code",[e._v("docker commit")])]),e._v(" "),s("p",[e._v("使用 "),s("code",[e._v("docker commit")]),e._v(" 命令虽然可以比较直观的帮助理解镜像分层存储的概念，但是实际环境中并不会这样使用。")]),e._v(" "),s("p",[e._v("首先，如果仔细观察之前的 "),s("code",[e._v("docker diff webserver")]),e._v(" 的结果，你会发现除了真正想要修改的 "),s("code",[e._v("/usr/share/nginx/html/index.html")]),e._v(" 文件外，由于命令的执行，还有很多文件被改动或添加了。这还仅仅是最简单的操作，如果是安装软件包、编译构建，那会有大量的无关内容被添加进来，如果不小心清理，将会导致镜像极为臃肿。")]),e._v(" "),s("p",[e._v("此外，使用 "),s("code",[e._v("docker commit")]),e._v(" 意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为"),s("strong",[e._v("黑箱镜像")]),e._v("，换句话说，就是除了制作镜像的人知道执行过什么命令、怎么生成的镜像，别人根本无从得知。而且，即使是这个制作镜像的人，过一段时间后也无法记清具体在操作的。虽然 "),s("code",[e._v("docker diff")]),e._v(" 或许可以告诉得到一些线索，但是远远不到可以确保生成一致镜像的地步。这种黑箱镜像的维护工作是非常痛苦的。")]),e._v(" "),s("p",[e._v("而且，回顾之前提及的镜像所使用的分层存储的概念，除当前层外，之前的每一层都是不会发生改变的，换句话说，任何修改的结果仅仅是在当前层进行标记、添加、修改，而不会改动上一层。如果使用 "),s("code",[e._v("docker commit")]),e._v(" 制作镜像，以及后期修改的话，每一次修改都会让镜像更加臃肿一次，所删除的上一层的东西并不会丢失，会一直如影随形的跟着这个镜像，即使根本无法访问到。这会让镜像更加臃肿。")]),e._v(" "),s("h2",{attrs:{id:"第-11-章-dockerfile-定制镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第-11-章-dockerfile-定制镜像"}},[e._v("#")]),e._v(" 第 11 章 Dockerfile 定制镜像")]),e._v(" "),s("h3",{attrs:{id:"_11-1-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-1-概述"}},[e._v("#")]),e._v(" 11.1 概述")]),e._v(" "),s("p",[s("img",{attrs:{src:a(372),alt:""}})]),e._v(" "),s("p",[s("img",{attrs:{src:a(373),alt:""}})]),e._v(" "),s("p",[e._v("从刚才的 "),s("code",[e._v("docker commit")]),e._v(" 的学习中，我们可以了解到，镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。")]),e._v(" "),s("p",[e._v("Dockerfile 是一个文本文件，其内包含了一条条的"),s("strong",[e._v("指令(Instruction)")]),e._v("，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。")]),e._v(" "),s("h3",{attrs:{id:"_11-2-dockerfile-的规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-dockerfile-的规则"}},[e._v("#")]),e._v(" 11.2 Dockerfile 的规则")]),e._v(" "),s("ul",[s("li",[e._v("格式\n"),s("ul",[s("li",[e._v("#为注释")]),e._v(" "),s("li",[e._v("指令（大写）内容（小写）")]),e._v(" "),s("li",[e._v("尽管指令是大小写不敏感的, 但是我们强烈建议指令大写, 内容用小写表示")])])]),e._v(" "),s("li",[e._v("Docker 是按顺序执行 Dockerfile 里的指令集合的 (从上到下依次执行)")]),e._v(" "),s("li",[e._v('每一个 Dockerfile 的第一个非注释指令, 必须是 "FROM" 指令, 用于为镜像文件构建过程中, 指定基准镜像, 后续的指令运行与此基准镜像所提供的运行环境中\n'),s("ul",[s("li",[e._v("实践中, 基准镜像可以是任何可用的镜像文件, 默认情况下, docker build 会在 docker 主机 (本地) 上查找指定的镜像文件, 当其在本地不存在时, 则会从 Docker registry (远端) 上拉取所需镜像文件。")])])])]),e._v(" "),s("h3",{attrs:{id:"_11-3-示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-示例"}},[e._v("#")]),e._v(" 11.3 示例")]),e._v(" "),s("p",[e._v("还以之前定制 "),s("code",[e._v("nginx")]),e._v(" 镜像为例，这次我们使用 Dockerfile 来定制。")]),e._v(" "),s("p",[e._v("在一个空白目录中，建立一个文本文件，并命名为 "),s("code",[e._v("Dockerfile")]),e._v("：")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# mkdir mynginx")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# cd mynginx")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# touch Dockerfile")]),e._v("\n")])])]),s("p",[e._v("其内容为：")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" nginx\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" echo "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'<h1>Hello, Docker!</h1>'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")]),e._v(" /usr/share/nginx/html/index.html\n")])])]),s("p",[e._v("这个 Dockerfile 很简单，一共就两行。涉及到了两条指令，"),s("code",[e._v("FROM")]),e._v(" 和 "),s("code",[e._v("RUN")]),e._v("。")]),e._v(" "),s("h3",{attrs:{id:"_11-4-from-指定基础镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-4-from-指定基础镜像"}},[e._v("#")]),e._v(" 11.4 FROM 指定基础镜像")]),e._v(" "),s("p",[e._v("所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行了一个 "),s("code",[e._v("nginx")]),e._v(" 镜像的容器，再进行修改一样，基础镜像是必须指定的。而 "),s("code",[e._v("FROM")]),e._v(" 就是指定"),s("strong",[e._v("基础镜像")]),e._v("，因此一个 "),s("code",[e._v("Dockerfile")]),e._v(" 中 "),s("code",[e._v("FROM")]),e._v(" 是必备的指令，并且必须是第一条指令。")]),e._v(" "),s("p",[e._v("在 "),s("a",{attrs:{href:"https://store.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Store"),s("OutboundLink")],1),e._v(" 上有非常多的高质量的官方镜像，有可以直接拿来使用的服务类的镜像，如 "),s("a",{attrs:{href:"https://store.docker.com/images/nginx/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("nginx")]),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/redis/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("redis")]),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/mongo/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("mongo")]),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/mysql/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("mysql")]),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/httpd/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("httpd")]),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/php/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("php")]),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/tomcat/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("tomcat")]),s("OutboundLink")],1),e._v(" 等；也有一些方便开发、构建、运行各种语言应用的镜像，如 "),s("a",{attrs:{href:"https://store.docker.com/images/node",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("node")]),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/openjdk/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("openjdk")]),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/python/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("python")]),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/ruby/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("ruby")]),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/golang/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("golang")]),s("OutboundLink")],1),e._v(" 等。可以在其中寻找一个最符合我们最终目标的镜像为基础镜像进行定制。")]),e._v(" "),s("p",[e._v("如果没有找到对应服务的镜像，官方镜像中还提供了一些更为基础的操作系统镜像，如 "),s("a",{attrs:{href:"https://store.docker.com/images/ubuntu/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("ubuntu")]),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/debian/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("debian")]),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/centos/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("centos")]),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/fedora/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("fedora")]),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/alpine/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("alpine")]),s("OutboundLink")],1),e._v(" 等，这些操作系统的软件库为我们提供了更广阔的扩展空间。")]),e._v(" "),s("p",[e._v("除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 "),s("code",[e._v("scratch")]),e._v("。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" scratch\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("...")]),e._v("\n")])])]),s("p",[e._v("如果你以 "),s("code",[e._v("scratch")]),e._v(" 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。")]),e._v(" "),s("p",[e._v("不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，比如 "),s("a",{attrs:{href:"https://hub.docker.com/_/swarm/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("swarm")]),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"https://quay.io/repository/coreos/etcd",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("coreos/etcd")]),s("OutboundLink")],1),e._v("。对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 "),s("code",[e._v("FROM scratch")]),e._v(" 会让镜像体积更加小巧。使用 "),s("a",{attrs:{href:"https://golang.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Go 语言"),s("OutboundLink")],1),e._v(" 开发的应用很多会使用这种方式来制作镜像，这也是为什么有人认为 Go 是特别适合容器微服务架构的语言的原因之一。")]),e._v(" "),s("h3",{attrs:{id:"_11-5-run-执行命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-5-run-执行命令"}},[e._v("#")]),e._v(" 11.5 RUN 执行命令")]),e._v(" "),s("p",[s("code",[e._v("RUN")]),e._v(" 指令是用来执行命令行命令的。由于命令行的强大能力，"),s("code",[e._v("RUN")]),e._v(" 指令在定制镜像时是最常用的指令之一。其格式有两种：")]),e._v(" "),s("ul",[s("li",[s("p",[s("em",[e._v("shell")]),e._v(" 格式："),s("code",[e._v("RUN <命令>")]),e._v("，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 "),s("code",[e._v("RUN")]),e._v(" 指令就是这种格式。")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("RUN "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'<h1>Hello, Docker!</h1>'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /usr/share/nginx/html/index.html\n")])])])]),e._v(" "),s("li",[s("p",[s("em",[e._v("exec")]),e._v(" 格式："),s("code",[e._v('RUN ["可执行文件", "参数1", "参数2"]')]),e._v("，这更像是函数调用中的格式。")])])]),e._v(" "),s("p",[e._v("既然 "),s("code",[e._v("RUN")]),e._v(" 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" debian"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("jessie\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("get update\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("get install "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("y gcc libc6"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("dev make\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" wget "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("O redis.tar.gz "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"http://download.redis.io/releases/redis-3.2.5.tar.gz"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" mkdir "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("p /usr/src/redis\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" tar "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("xzf redis.tar.gz "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("C /usr/src/redis "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("strip"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("components=1\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" make "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("C /usr/src/redis\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" make "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("C /usr/src/redis install\n")])])]),s("p",[e._v("之前说过，Dockerfile 中每一个指令都会建立一层，"),s("code",[e._v("RUN")]),e._v(" 也不例外。每一个 "),s("code",[e._v("RUN")]),e._v(" 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，"),s("code",[e._v("commit")]),e._v(" 这一层的修改，构成新的镜像。")]),e._v(" "),s("p",[e._v("而上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。 这是很多初学 Docker 的人常犯的一个错误。")]),e._v(" "),s("p",[s("em",[e._v("Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。")])]),e._v(" "),s("p",[e._v("上面的 "),s("code",[e._v("Dockerfile")]),e._v(" 正确的写法应该是这样：")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" debian"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("jessie\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" buildDeps="),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'gcc libc6-dev make'")]),e._v(" \\\n    && apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("get update \\\n    && apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("get install "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("y $buildDeps \\\n    && wget "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("O redis.tar.gz "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"http://download.redis.io/releases/redis-3.2.5.tar.gz"')]),e._v(" \\\n    && mkdir "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("p /usr/src/redis \\\n    && tar "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("xzf redis.tar.gz "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("C /usr/src/redis "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("strip"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("components=1 \\\n    && make "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("C /usr/src/redis \\\n    && make "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("C /usr/src/redis install \\\n    && rm "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("rf /var/lib/apt/lists/* \\\n    && rm redis.tar.gz \\\n    && rm "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("r /usr/src/redis \\\n    && apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("get purge "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("y "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("auto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("remove $buildDeps\n")])])]),s("p",[e._v("首先，之前所有的命令只有一个目的，就是编译、安装 redis 可执行文件。因此没有必要建立很多层，这只是一层的事情。因此，这里没有使用很多个 "),s("code",[e._v("RUN")]),e._v(" 对一一对应不同的命令，而是仅仅使用一个 "),s("code",[e._v("RUN")]),e._v(" 指令，并使用 "),s("code",[e._v("&&")]),e._v(" 将各个所需命令串联起来。将之前的 7 层，简化为了 1 层。在撰写 Dockerfile 的时候，要经常提醒自己，这并不是在写 Shell 脚本，而是在定义每一层该如何构建。")]),e._v(" "),s("p",[e._v("并且，这里为了格式化还进行了换行。Dockerfile 支持 Shell 类的行尾添加 "),s("code",[e._v("\\")]),e._v(" 的命令换行方式，以及行首 "),s("code",[e._v("#")]),e._v(" 进行注释的格式。良好的格式，比如换行、缩进、注释等，会让维护、排障更为容易，这是一个比较好的习惯。")]),e._v(" "),s("p",[e._v("此外，还可以看到这一组命令的最后添加了清理工作的命令，删除了为了编译构建所需要的软件，清理了所有下载、展开的文件，并且还清理了 "),s("code",[e._v("apt")]),e._v(" 缓存文件。这是很重要的一步，我们之前说过，镜像是多层存储，每一层的东西并不会在下一层被删除，会一直跟随着镜像。因此镜像构建时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。")]),e._v(" "),s("p",[e._v("很多人初学 Docker 制作出了很臃肿的镜像的原因之一，就是忘记了每一层构建的最后一定要清理掉无关文件。")]),e._v(" "),s("h3",{attrs:{id:"_11-6-构建镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-6-构建镜像"}},[e._v("#")]),e._v(" 11.6 构建镜像")]),e._v(" "),s("p",[e._v("好了，让我们再回到之前定制的 nginx 镜像的 Dockerfile 来。现在我们明白了这个 Dockerfile 的内容，那么让我们来构建这个镜像吧。")]),e._v(" "),s("p",[e._v("在 "),s("code",[e._v("Dockerfile")]),e._v(" 文件所在目录执行：")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker build -t nginx:v3 .")]),e._v("\nSending build context to Docker daemon "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.048")]),e._v(" kB\nStep "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" FROM nginx\n ---"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" e43d811ce2f4\nStep "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" RUN "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'<h1>Hello, Docker!</h1>'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /usr/share/nginx/html/index.html\n ---"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" Running "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" 9cdc27646c7b\n ---"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" 44aa4490ce2c\nRemoving intermediate container 9cdc27646c7b\nSuccessfully built 44aa4490ce2c\n")])])]),s("p",[e._v("从命令的输出结果中，我们可以清晰的看到镜像的构建过程。在 "),s("code",[e._v("Step 2")]),e._v(" 中，如同我们之前所说的那样，"),s("code",[e._v("RUN")]),e._v(" 指令启动了一个容器 "),s("code",[e._v("9cdc27646c7b")]),e._v("，执行了所要求的命令，并最后提交了这一层 "),s("code",[e._v("44aa4490ce2c")]),e._v("，随后删除了所用到的这个容器 "),s("code",[e._v("9cdc27646c7b")]),e._v("。")]),e._v(" "),s("p",[e._v("这里我们使用了 "),s("code",[e._v("docker build")]),e._v(" 命令进行镜像构建。其格式为：")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("docker build "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("选项"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("上下文路径/URL/-"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),s("p",[e._v("在这里我们指定了最终镜像的名称 "),s("code",[e._v("-t nginx:v3")]),e._v("，构建成功后，我们可以像之前运行 "),s("code",[e._v("nginx:v2")]),e._v(" 那样来运行这个镜像，其结果会和 "),s("code",[e._v("nginx:v2")]),e._v(" 一样。")]),e._v(" "),s("h3",{attrs:{id:"_11-7-镜像构建上下文-context"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-7-镜像构建上下文-context"}},[e._v("#")]),e._v(" 11.7 镜像构建上下文（Context）")]),e._v(" "),s("p",[e._v("如果注意，会看到 "),s("code",[e._v("docker build")]),e._v(" 命令最后有一个 "),s("code",[e._v(".")]),e._v("。"),s("code",[e._v(".")]),e._v(" 表示当前目录，而 "),s("code",[e._v("Dockerfile")]),e._v(" 就在当前目录，因此不少初学者以为这个路径是在指定 "),s("code",[e._v("Dockerfile")]),e._v(" 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定"),s("strong",[e._v("上下文路径")]),e._v("。那么什么是上下文呢？")]),e._v(" "),s("p",[e._v("首先我们要理解 "),s("code",[e._v("docker build")]),e._v(" 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 "),s("a",{attrs:{href:"https://docs.docker.com/engine/reference/api/docker_remote_api/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Remote API"),s("OutboundLink")],1),e._v("，而如 "),s("code",[e._v("docker")]),e._v(" 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 "),s("code",[e._v("docker")]),e._v(" 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。")]),e._v(" "),s("p",[e._v("当我们进行镜像构建的时候，并非所有定制都会通过 "),s("code",[e._v("RUN")]),e._v(" 指令完成，经常会需要将一些本地文件复制进镜像，比如通过 "),s("code",[e._v("COPY")]),e._v(" 指令、"),s("code",[e._v("ADD")]),e._v(" 指令等。而 "),s("code",[e._v("docker build")]),e._v(" 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？")]),e._v(" "),s("p",[e._v("这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，"),s("code",[e._v("docker build")]),e._v(" 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。")]),e._v(" "),s("p",[e._v("如果在 "),s("code",[e._v("Dockerfile")]),e._v(" 中这么写：")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("COPY")]),e._v(" ./package.json /app/\n")])])]),s("p",[e._v("这并不是要复制执行 "),s("code",[e._v("docker build")]),e._v(" 命令所在的目录下的 "),s("code",[e._v("package.json")]),e._v("，也不是复制 "),s("code",[e._v("Dockerfile")]),e._v(" 所在目录下的 "),s("code",[e._v("package.json")]),e._v("，而是复制 "),s("strong",[e._v("上下文（context）")]),e._v(" 目录下的 "),s("code",[e._v("package.json")]),e._v("。")]),e._v(" "),s("p",[e._v("因此，"),s("code",[e._v("COPY")]),e._v(" 这类指令中的源文件的路径都是"),s("em",[e._v("相对路径")]),e._v("。这也是初学者经常会问的为什么 "),s("code",[e._v("COPY ../package.json /app")]),e._v(" 或者 "),s("code",[e._v("COPY /opt/xxxx /app")]),e._v(" 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。")]),e._v(" "),s("p",[e._v("现在就可以理解刚才的命令 "),s("code",[e._v("docker build -t nginx:v3 .")]),e._v(" 中的这个 "),s("code",[e._v(".")]),e._v("，实际上是在指定上下文的目录，"),s("code",[e._v("docker build")]),e._v(" 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。")]),e._v(" "),s("p",[e._v("如果观察 "),s("code",[e._v("docker build")]),e._v(" 输出，我们其实已经看到了这个发送上下文的过程：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker build -t nginx:v3 .")]),e._v("\nSending build context to Docker daemon "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.048")]),e._v(" kB\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n")])])]),s("p",[e._v("理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初学者在发现 "),s("code",[e._v("COPY /opt/xxxx /app")]),e._v(" 不工作后，于是干脆将 "),s("code",[e._v("Dockerfile")]),e._v(" 放到了硬盘根目录去构建，结果发现 "),s("code",[e._v("docker build")]),e._v(" 执行后，在发送一个几十 GB 的东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让 "),s("code",[e._v("docker build")]),e._v(" 打包整个硬盘，这显然是使用错误。")]),e._v(" "),s("p",[e._v("一般来说，应该会将 "),s("code",[e._v("Dockerfile")]),e._v(" 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 "),s("code",[e._v(".gitignore")]),e._v(" 一样的语法写一个 "),s("code",[e._v(".dockerignore")]),e._v("，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。")]),e._v(" "),s("p",[e._v("那么为什么会有人误以为 "),s("code",[e._v(".")]),e._v(" 是指定 "),s("code",[e._v("Dockerfile")]),e._v(" 所在目录呢？这是因为在默认情况下，如果不额外指定 "),s("code",[e._v("Dockerfile")]),e._v(" 的话，会将上下文目录下的名为 "),s("code",[e._v("Dockerfile")]),e._v(" 的文件作为 Dockerfile。")]),e._v(" "),s("p",[e._v("这只是默认行为，实际上 "),s("code",[e._v("Dockerfile")]),e._v(" 的文件名并不要求必须为 "),s("code",[e._v("Dockerfile")]),e._v("，而且并不要求必须位于上下文目录中，比如可以用 "),s("code",[e._v("-f ../Dockerfile.php")]),e._v(" 参数指定某个文件作为 "),s("code",[e._v("Dockerfile")]),e._v("。")]),e._v(" "),s("p",[e._v("当然，一般大家习惯性的会使用默认的文件名 "),s("code",[e._v("Dockerfile")]),e._v("，以及会将其置于镜像构建上下文目录中。")]),e._v(" "),s("h3",{attrs:{id:"_11-8-其他-docker-build-的用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-8-其他-docker-build-的用法"}},[e._v("#")]),e._v(" 11.8 其他 docker build 的用法")]),e._v(" "),s("h4",{attrs:{id:"直接用-git-repo-进行构建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#直接用-git-repo-进行构建"}},[e._v("#")]),e._v(" 直接用 Git repo 进行构建")]),e._v(" "),s("p",[e._v("或许你已经注意到了，"),s("code",[e._v("docker build")]),e._v(" 还支持从 URL 构建，比如可以直接从 Git repo 中构建：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker build https://github.com/twang2218/gitlab-ce-zh.git#:8.14")]),e._v("\n\ndocker build https://github.com/twang2218/gitlab-ce-zh.git"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("#:8.14\nSending build context to Docker daemon "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.048")]),e._v(" kB\nStep "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" FROM gitlab/gitlab-ce:8.14.0-ce.0\n"),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("8.14")]),e._v(".0-ce.0: Pulling from gitlab/gitlab-ce\naed15891ba52: Already exists\n773ae8583d14: Already exists\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n")])])]),s("p",[e._v("这行命令指定了构建所需的 Git repo，并且指定默认的 "),s("code",[e._v("master")]),e._v(" 分支，构建目录为 "),s("code",[e._v("/8.14/")]),e._v("，然后 Docker 就会自己去 "),s("code",[e._v("git clone")]),e._v(" 这个项目、切换到指定分支、并进入到指定目录后开始构建。")]),e._v(" "),s("h4",{attrs:{id:"用给定的-tar-压缩包构建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用给定的-tar-压缩包构建"}},[e._v("#")]),e._v(" 用给定的 tar 压缩包构建")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker build http://server/context.tar.gz")]),e._v("\n")])])]),s("p",[e._v("如果所给出的 URL 不是个 Git repo，而是个 "),s("code",[e._v("tar")]),e._v(" 压缩包，那么 Docker 引擎会下载这个包，并自动解压缩，以其作为上下文，开始构建。")]),e._v(" "),s("h2",{attrs:{id:"第-12-章-dockerfile-指令详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第-12-章-dockerfile-指令详解"}},[e._v("#")]),e._v(" 第 12 章 Dockerfile 指令详解")]),e._v(" "),s("p",[e._v("我们已经介绍了 "),s("code",[e._v("FROM")]),e._v("，"),s("code",[e._v("RUN")]),e._v("，还提及了 "),s("code",[e._v("COPY")]),e._v(", "),s("code",[e._v("ADD")]),e._v("，其实 "),s("code",[e._v("Dockerfile")]),e._v(" 功能很强大，它提供了十多个指令。下面我们继续讲解其他的指令。")]),e._v(" "),s("h3",{attrs:{id:"_12-1-copy-复制文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-1-copy-复制文件"}},[e._v("#")]),e._v(" 12.1 COPY 复制文件")]),e._v(" "),s("p",[e._v("格式：")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("COPY <源路径>... <目标路径>")])]),e._v(" "),s("li",[s("code",[e._v('COPY ["<源路径1>",... "<目标路径>"]')])])]),e._v(" "),s("p",[e._v("和 "),s("code",[e._v("RUN")]),e._v(" 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。")]),e._v(" "),s("p",[s("code",[e._v("COPY")]),e._v(" 指令将从构建上下文目录中 "),s("code",[e._v("<源路径>")]),e._v(" 的文件/目录复制到新的一层的镜像内的 "),s("code",[e._v("<目标路径>")]),e._v(" 位置。比如：")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("COPY")]),e._v(" package.json /usr/src/app/\n")])])]),s("p",[s("code",[e._v("<源路径>")]),e._v(" 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 "),s("a",{attrs:{href:"https://golang.org/pkg/path/filepath/#Match",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("filepath.Match")]),s("OutboundLink")],1),e._v(" 规则，如：")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("COPY")]),e._v(" hom* /mydir/\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("COPY")]),e._v(" hom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("?")]),e._v(".txt /mydir/\n")])])]),s("p",[s("code",[e._v("<目标路径>")]),e._v(" 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 "),s("code",[e._v("WORKDIR")]),e._v(" 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。")]),e._v(" "),s("p",[e._v("此外，还需要注意一点，使用 "),s("code",[e._v("COPY")]),e._v(" 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。")]),e._v(" "),s("h3",{attrs:{id:"_12-2-add-更高级的复制文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-2-add-更高级的复制文件"}},[e._v("#")]),e._v(" 12.2 ADD 更高级的复制文件")]),e._v(" "),s("p",[s("code",[e._v("ADD")]),e._v(" 指令和 "),s("code",[e._v("COPY")]),e._v(" 的格式和性质基本一致。但是在 "),s("code",[e._v("COPY")]),e._v(" 基础上增加了一些功能。")]),e._v(" "),s("p",[e._v("比如 "),s("code",[e._v("<源路径>")]),e._v(" 可以是一个 "),s("code",[e._v("URL")]),e._v("，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 "),s("code",[e._v("<目标路径>")]),e._v(" 去。下载后的文件权限自动设置为 "),s("code",[e._v("600")]),e._v("，如果这并不是想要的权限，那么还需要增加额外的一层 "),s("code",[e._v("RUN")]),e._v(" 进行权限调整，另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 "),s("code",[e._v("RUN")]),e._v(" 指令进行解压缩。所以不如直接使用 "),s("code",[e._v("RUN")]),e._v(" 指令，然后使用 "),s("code",[e._v("wget")]),e._v(" 或者 "),s("code",[e._v("curl")]),e._v(" 工具下载，处理权限、解压缩、然后清理无用文件更合理。因此，这个功能其实并不实用，而且不推荐使用。")]),e._v(" "),s("p",[e._v("如果 "),s("code",[e._v("<源路径>")]),e._v(" 为一个 "),s("code",[e._v("tar")]),e._v(" 压缩文件的话，压缩格式为 "),s("code",[e._v("gzip")]),e._v(", "),s("code",[e._v("bzip2")]),e._v(" 以及 "),s("code",[e._v("xz")]),e._v(" 的情况下，"),s("code",[e._v("ADD")]),e._v(" 指令将会自动解压缩这个压缩文件到 "),s("code",[e._v("<目标路径>")]),e._v(" 去。")]),e._v(" "),s("p",[e._v("在某些情况下，这个自动解压缩的功能非常有用，比如官方镜像 "),s("code",[e._v("ubuntu")]),e._v(" 中：")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" scratch\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ADD")]),e._v(" ubuntu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("xenial"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("core"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("cloudimg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("amd64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("root.tar.gz /\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("...")]),e._v("\n")])])]),s("p",[e._v("但在某些情况下，如果我们真的是希望复制个压缩文件进去，而不解压缩，这时就不可以使用 "),s("code",[e._v("ADD")]),e._v(" 命令了。")]),e._v(" "),s("p",[e._v("在 Docker 官方的 "),s("code",[e._v("Dockerfile 最佳实践文档")]),e._v(" 中要求，尽可能的使用 "),s("code",[e._v("COPY")]),e._v("，因为 "),s("code",[e._v("COPY")]),e._v(" 的语义很明确，就是复制文件而已，而 "),s("code",[e._v("ADD")]),e._v(" 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 "),s("code",[e._v("ADD")]),e._v(" 的场合，就是所提及的需要自动解压缩的场合。")]),e._v(" "),s("p",[e._v("另外需要注意的是，"),s("code",[e._v("ADD")]),e._v(" 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。")]),e._v(" "),s("p",[e._v("因此在 "),s("code",[e._v("COPY")]),e._v(" 和 "),s("code",[e._v("ADD")]),e._v(" 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 "),s("code",[e._v("COPY")]),e._v(" 指令，仅在需要自动解压缩的场合使用 "),s("code",[e._v("ADD")]),e._v("。")]),e._v(" "),s("h3",{attrs:{id:"_12-3-cmd-容器启动命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-3-cmd-容器启动命令"}},[e._v("#")]),e._v(" 12.3 CMD 容器启动命令")]),e._v(" "),s("p",[s("code",[e._v("CMD")]),e._v(" 指令的格式和 "),s("code",[e._v("RUN")]),e._v(" 相似，也是两种格式：")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("shell")]),e._v(" 格式："),s("code",[e._v("CMD <命令>")])]),e._v(" "),s("li",[s("code",[e._v("exec")]),e._v(" 格式："),s("code",[e._v('CMD ["可执行文件", "参数1", "参数2"...]')])]),e._v(" "),s("li",[e._v("参数列表格式："),s("code",[e._v('CMD ["参数1", "参数2"...]')]),e._v("。在指定了 "),s("code",[e._v("ENTRYPOINT")]),e._v(" 指令后，用 "),s("code",[e._v("CMD")]),e._v(" 指定具体的参数。")])]),e._v(" "),s("p",[e._v("之前介绍容器的时候曾经说过，Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。"),s("code",[e._v("CMD")]),e._v(" 指令就是用于指定默认的容器主进程的启动命令的。")]),e._v(" "),s("p",[e._v("在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，"),s("code",[e._v("ubuntu")]),e._v(" 镜像默认的 "),s("code",[e._v("CMD")]),e._v(" 是 "),s("code",[e._v("/bin/bash")]),e._v("，如果我们直接 "),s("code",[e._v("docker run -it ubuntu")]),e._v(" 的话，会直接进入 "),s("code",[e._v("bash")]),e._v("。我们也可以在运行时指定运行别的命令，如 "),s("code",[e._v("docker run -it ubuntu cat /etc/os-release")]),e._v("。这就是用 "),s("code",[e._v("cat /etc/os-release")]),e._v(" 命令替换了默认的 "),s("code",[e._v("/bin/bash")]),e._v(" 命令了，输出了系统版本信息。")]),e._v(" "),s("p",[e._v("在指令格式上，一般推荐使用 "),s("code",[e._v("exec")]),e._v(" 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 "),s("code",[e._v('"')]),e._v("，而不要使用单引号。")]),e._v(" "),s("p",[e._v("如果使用 "),s("code",[e._v("shell")]),e._v(" 格式的话，实际的命令会被包装为 "),s("code",[e._v("sh -c")]),e._v(" 的参数的形式进行执行。比如：")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("CMD")]),e._v(" echo $HOME\n")])])]),s("p",[e._v("在实际执行中，会将其变更为：")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("CMD")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"sh"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-c"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"echo $HOME"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),s("p",[e._v("这就是为什么我们可以使用环境变量的原因，因为这些环境变量会被 shell 进行解析处理。")]),e._v(" "),s("p",[e._v("提到 "),s("code",[e._v("CMD")]),e._v(" 就不得不提容器中应用在前台执行和后台执行的问题。这是初学者常出现的一个混淆。")]),e._v(" "),s("p",[e._v("Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 upstart/systemd 去启动后台服务，容器内没有后台服务的概念。")]),e._v(" "),s("p",[e._v("一些初学者将 "),s("code",[e._v("CMD")]),e._v(" 写为：")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("CMD")]),e._v(" service nginx start\n")])])]),s("p",[e._v("然后发现容器执行后就立即退出了。甚至在容器内去使用 "),s("code",[e._v("systemctl")]),e._v(" 命令结果却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。")]),e._v(" "),s("p",[e._v("对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。")]),e._v(" "),s("p",[e._v("而使用 "),s("code",[e._v("service nginx start")]),e._v(" 命令，则是希望 upstart 来以后台守护进程形式启动 "),s("code",[e._v("nginx")]),e._v(" 服务。而刚才说了 "),s("code",[e._v("CMD service nginx start")]),e._v(" 会被理解为 "),s("code",[e._v('CMD [ "sh", "-c", "service nginx start"]')]),e._v("，因此主进程实际上是 "),s("code",[e._v("sh")]),e._v("。那么当 "),s("code",[e._v("service nginx start")]),e._v(" 命令结束后，"),s("code",[e._v("sh")]),e._v(" 也就结束了，"),s("code",[e._v("sh")]),e._v(" 作为主进程退出了，自然就会令容器退出。")]),e._v(" "),s("p",[e._v("正确的做法是直接执行 "),s("code",[e._v("nginx")]),e._v(" 可执行文件，并且要求以前台形式运行。比如：")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("CMD")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"nginx"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-g"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"daemon off;"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),s("h3",{attrs:{id:"_12-4-entrypoint-入口点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-4-entrypoint-入口点"}},[e._v("#")]),e._v(" 12.4 ENTRYPOINT 入口点")]),e._v(" "),s("p",[s("code",[e._v("ENTRYPOINT")]),e._v(" 的格式和 "),s("code",[e._v("RUN")]),e._v(" 指令格式一样，分为 "),s("code",[e._v("exec")]),e._v(" 格式和 "),s("code",[e._v("shell")]),e._v(" 格式。")]),e._v(" "),s("p",[s("code",[e._v("ENTRYPOINT")]),e._v(" 的目的和 "),s("code",[e._v("CMD")]),e._v(" 一样，都是在指定容器启动程序及参数。"),s("code",[e._v("ENTRYPOINT")]),e._v(" 在运行时也可以替代，不过比 "),s("code",[e._v("CMD")]),e._v(" 要略显繁琐，需要通过 "),s("code",[e._v("docker run")]),e._v(" 的参数 "),s("code",[e._v("--entrypoint")]),e._v(" 来指定。")]),e._v(" "),s("p",[e._v("当指定了 "),s("code",[e._v("ENTRYPOINT")]),e._v(" 后，"),s("code",[e._v("CMD")]),e._v(" 的含义就发生了改变，不再是直接的运行其命令，而是将 "),s("code",[e._v("CMD")]),e._v(" 的内容作为参数传给 "),s("code",[e._v("ENTRYPOINT")]),e._v(" 指令，换句话说实际执行时，将变为：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("ENTRYPOINT"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"<CMD>"')]),e._v("\n")])])]),s("p",[e._v("那么有了 "),s("code",[e._v("CMD")]),e._v(" 后，为什么还要有 "),s("code",[e._v("ENTRYPOINT")]),e._v(" 呢？这种 "),s("ENTRYPOINT",[e._v(' "'),s("CMD",[e._v('" 有什么好处么？让我们来看几个场景。')])],1)],1),e._v(" "),s("h4",{attrs:{id:"场景一-让镜像变成像命令一样使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#场景一-让镜像变成像命令一样使用"}},[e._v("#")]),e._v(" 场景一：让镜像变成像命令一样使用")]),e._v(" "),s("p",[e._v("假设我们需要一个得知自己当前公网 IP 的镜像，那么可以先用 "),s("code",[e._v("CMD")]),e._v(" 来实现：")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" ubuntu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("16.04\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("get update \\\n    && apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("get install "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("y curl \\\n    && rm "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("rf /var/lib/apt/lists/*\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("CMD")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"curl"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-s"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"http://ip.cn"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),s("p",[e._v("假如我们使用 "),s("code",[e._v("docker build -t myip .")]),e._v(" 来构建镜像的话，如果我们需要查询当前公网 IP，只需要执行：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker run myip")]),e._v("\n当前 IP：61.148.226.66 来自：北京市 联通\n")])])]),s("p",[e._v("嗯，这么看起来好像可以直接把镜像当做命令使用了，不过命令总有参数，如果我们希望加参数呢？比如从上面的 "),s("code",[e._v("CMD")]),e._v(" 中可以看到实质的命令是 "),s("code",[e._v("curl")]),e._v("，那么如果我们希望显示 HTTP 头信息，就需要加上 "),s("code",[e._v("-i")]),e._v(" 参数。那么我们可以直接加 "),s("code",[e._v("-i")]),e._v(" 参数给 "),s("code",[e._v("docker run myip")]),e._v(" 么？")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker run myip -i")]),e._v("\ndocker: Error response from daemon: invalid header field value "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"oci runtime error: container_linux.go:247: starting container process caused '),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("exec: "),s("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[e._v("\\\\")]),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("-i"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[e._v("\\\\")]),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(": executable file not found in "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$PATH")]),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v('"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n")])])]),s("p",[e._v("我们可以看到可执行文件找不到的报错，"),s("code",[e._v("executable file not found")]),e._v("。之前我们说过，跟在镜像名后面的是 "),s("code",[e._v("command")]),e._v("，运行时会替换 "),s("code",[e._v("CMD")]),e._v(" 的默认值。因此这里的 "),s("code",[e._v("-i")]),e._v(" 替换了原来的 "),s("code",[e._v("CMD")]),e._v("，而不是添加在原来的 "),s("code",[e._v("curl -s http://ip.cn")]),e._v(" 后面。而 "),s("code",[e._v("-i")]),e._v(" 根本不是命令，所以自然找不到。")]),e._v(" "),s("p",[e._v("那么如果我们希望加入 "),s("code",[e._v("-i")]),e._v(" 这参数，我们就必须重新完整的输入这个命令：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker run myip curl -s http://ip.cn -i")]),e._v("\n")])])]),s("p",[e._v("这显然不是很好的解决方案，而使用 "),s("code",[e._v("ENTRYPOINT")]),e._v(" 就可以解决这个问题。现在我们重新用 "),s("code",[e._v("ENTRYPOINT")]),e._v(" 来实现这个镜像：")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" ubuntu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("16.04\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("get update \\\n    && apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("get install "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("y curl \\\n    && rm "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("rf /var/lib/apt/lists/*\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ENTRYPOINT")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"curl"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-s"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"http://ip.cn"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),s("p",[e._v("这次我们再来尝试直接使用 "),s("code",[e._v("docker run myip -i")]),e._v("：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker run myip")]),e._v("\n当前 IP：61.148.226.66 来自：北京市 联通\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker run myip -i")]),e._v("\nHTTP/1.1 "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("200")]),e._v(" OK\nServer: nginx/1.8.0\nDate: Tue, "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("22")]),e._v(" Nov "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2016")]),e._v(" 05:12:40 GMT\nContent-Type: text/html"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("charset")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("UTF-8\nVary: Accept-Encoding\nX-Powered-By: PHP/5.6.24-1~dotdeb+7.1\nX-Cache: MISS from cache-2\nX-Cache-Lookup: MISS from cache-2:80\nX-Cache: MISS from proxy-2_6\nTransfer-Encoding: chunked\nVia: "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.1")]),e._v(" cache-2:80, "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.1")]),e._v(" proxy-2_6:8006\nConnection: keep-alive\n\n当前 IP：61.148.226.66 来自：北京市 联通\n")])])]),s("p",[e._v("可以看到，这次成功了。这是因为当存在 "),s("code",[e._v("ENTRYPOINT")]),e._v(" 后，"),s("code",[e._v("CMD")]),e._v(" 的内容将会作为参数传给 "),s("code",[e._v("ENTRYPOINT")]),e._v("，而这里 "),s("code",[e._v("-i")]),e._v(" 就是新的 "),s("code",[e._v("CMD")]),e._v("，因此会作为参数传给 "),s("code",[e._v("curl")]),e._v("，从而达到了我们预期的效果。")]),e._v(" "),s("h4",{attrs:{id:"场景二-应用运行前的准备工作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#场景二-应用运行前的准备工作"}},[e._v("#")]),e._v(" 场景二：应用运行前的准备工作")]),e._v(" "),s("p",[e._v("启动容器就是启动主进程，但有些时候，启动主进程前，需要一些准备工作。")]),e._v(" "),s("p",[e._v("比如 "),s("code",[e._v("mysql")]),e._v(" 类的数据库，可能需要一些数据库配置、初始化的工作，这些工作要在最终的 mysql 服务器运行之前解决。")]),e._v(" "),s("p",[e._v("此外，可能希望避免使用 "),s("code",[e._v("root")]),e._v(" 用户去启动服务，从而提高安全性，而在启动服务前还需要以 "),s("code",[e._v("root")]),e._v(" 身份执行一些必要的准备工作，最后切换到服务用户身份启动服务。或者除了服务外，其它命令依旧可以使用 "),s("code",[e._v("root")]),e._v(" 身份执行，方便调试等。")]),e._v(" "),s("p",[e._v("这些准备工作是和容器 "),s("code",[e._v("CMD")]),e._v(" 无关的，无论 "),s("code",[e._v("CMD")]),e._v(" 为什么，都需要事先进行一个预处理的工作。这种情况下，可以写一个脚本，然后放入 "),s("code",[e._v("ENTRYPOINT")]),e._v(" 中去执行，而这个脚本会将接到的参数（也就是 "),s("CMD",[e._v("）作为命令，在脚本最后执行。比如官方镜像 "),s("code",[e._v("redis")]),e._v(" 中就是这么做的：")])],1),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" alpine"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("3.4\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("...")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" addgroup "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("S redis && adduser "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("S "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("G redis redis\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("...")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ENTRYPOINT")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"docker-entrypoint.sh"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("EXPOSE")]),e._v(" 6379\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("CMD")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"redis-server"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),s("p",[e._v("可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 "),s("code",[e._v("ENTRYPOINT")]),e._v(" 为 "),s("code",[e._v("docker-entrypoint.sh")]),e._v(" 脚本。")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[e._v("#!/bin/sh")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# allow the container to be started with `--user`")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$1")]),e._v('"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'redis-server'")]),e._v(" -a "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("id")]),e._v(" -u"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v('"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'0'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("then")]),e._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("chown")]),e._v(" -R redis "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n\t"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" su-exec redis "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$0")]),e._v('"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$@")]),e._v('"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fi")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$@")]),e._v('"')]),e._v("\n")])])]),s("p",[e._v("该脚本的内容就是根据 "),s("code",[e._v("CMD")]),e._v(" 的内容来判断，如果是 "),s("code",[e._v("redis-server")]),e._v(" 的话，则切换到 "),s("code",[e._v("redis")]),e._v(" 用户身份启动服务器，否则依旧使用 "),s("code",[e._v("root")]),e._v(" 身份执行。比如：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker run -it redis id")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("uid")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("gid")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("groups")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),s("h3",{attrs:{id:"_12-5-env-设置环境变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-5-env-设置环境变量"}},[e._v("#")]),e._v(" 12.5 ENV 设置环境变量")]),e._v(" "),s("p",[e._v("格式有两种：")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("ENV")])]),e._v(" "),s("li",[s("code",[e._v("ENV = =...")])])]),e._v(" "),s("p",[e._v("这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 "),s("code",[e._v("RUN")]),e._v("，还是运行时的应用，都可以直接使用这里定义的环境变量。")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ENV")]),e._v(" VERSION=1.0 DEBUG=on \\\n    NAME="),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Happy Feet"')]),e._v("\n")])])]),s("p",[e._v("这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。")]),e._v(" "),s("p",[e._v("定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 "),s("code",[e._v("node")]),e._v(" 镜像 "),s("code",[e._v("Dockerfile")]),e._v(" 中，就有类似这样的代码：")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ENV")]),e._v(" NODE_VERSION 7.2.0\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" curl "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("SLO "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz"')]),e._v(" \\\n  && curl "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("SLO "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"')]),e._v(" \\\n  && gpg "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("batch "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("decrypt "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("output SHASUMS256.txt SHASUMS256.txt.asc \\\n  && grep "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('" node-v$NODE_VERSION-linux-x64.tar.xz\\$"')]),e._v(" SHASUMS256.txt "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),e._v(" sha256sum "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("c "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" \\\n  && tar "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("xJf "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"node-v$NODE_VERSION-linux-x64.tar.xz"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("C /usr/local "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("strip"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("components=1 \\\n  && rm "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"node-v$NODE_VERSION-linux-x64.tar.xz"')]),e._v(" SHASUMS256.txt.asc SHASUMS256.txt \\\n  && ln "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("s /usr/local/bin/node /usr/local/bin/nodejs\n")])])]),s("p",[e._v("在这里先定义了环境变量 "),s("code",[e._v("NODE_VERSION")]),e._v("，其后的 "),s("code",[e._v("RUN")]),e._v(" 这层里，多次使用 "),s("code",[e._v("$NODE_VERSION")]),e._v(" 来进行操作定制。可以看到，将来升级镜像构建版本的时候，只需要更新 "),s("code",[e._v("7.2.0")]),e._v(" 即可，"),s("code",[e._v("Dockerfile")]),e._v(" 构建维护变得更轻松了。")]),e._v(" "),s("p",[e._v("下列指令可以支持环境变量展开： "),s("code",[e._v("ADD")]),e._v("、"),s("code",[e._v("COPY")]),e._v("、"),s("code",[e._v("ENV")]),e._v("、"),s("code",[e._v("EXPOSE")]),e._v("、"),s("code",[e._v("LABEL")]),e._v("、"),s("code",[e._v("USER")]),e._v("、"),s("code",[e._v("WORKDIR")]),e._v("、"),s("code",[e._v("VOLUME")]),e._v("、"),s("code",[e._v("STOPSIGNAL")]),e._v("、"),s("code",[e._v("ONBUILD")]),e._v("。")]),e._v(" "),s("p",[e._v("可以从这个指令列表里感觉到，环境变量可以使用的地方很多，很强大。通过环境变量，我们可以让一份 "),s("code",[e._v("Dockerfile")]),e._v(" 制作更多的镜像，只需使用不同的环境变量即可。")]),e._v(" "),s("h3",{attrs:{id:"_12-6-arg-构建参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-6-arg-构建参数"}},[e._v("#")]),e._v(" 12.6 ARG 构建参数")]),e._v(" "),s("p",[e._v("格式："),s("code",[e._v("ARG <参数名>[=<默认值>]")])]),e._v(" "),s("p",[e._v("构建参数和 "),s("code",[e._v("ENV")]),e._v(" 的效果一样，都是设置环境变量。所不同的是，"),s("code",[e._v("ARG")]),e._v(" 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 "),s("code",[e._v("ARG")]),e._v(" 保存密码之类的信息，因为 "),s("code",[e._v("docker history")]),e._v(" 还是可以看到所有值的。")]),e._v(" "),s("p",[s("code",[e._v("Dockerfile")]),e._v(" 中的 "),s("code",[e._v("ARG")]),e._v(" 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 "),s("code",[e._v("docker build")]),e._v(" 中用 "),s("code",[e._v("--build-arg <参数名>=<值>")]),e._v(" 来覆盖。")]),e._v(" "),s("p",[e._v("在 1.13 之前的版本，要求 "),s("code",[e._v("--build-arg")]),e._v(" 中的参数名，必须在 "),s("code",[e._v("Dockerfile")]),e._v(" 中用 "),s("code",[e._v("ARG")]),e._v(" 定义过了，换句话说，就是 "),s("code",[e._v("--build-arg")]),e._v(" 指定的参数，必须在 "),s("code",[e._v("Dockerfile")]),e._v(" 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 "),s("code",[e._v("Dockerfile")]),e._v(" 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。")]),e._v(" "),s("h3",{attrs:{id:"_12-7-volume-定义匿名卷"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-7-volume-定义匿名卷"}},[e._v("#")]),e._v(" 12.7 VOLUME 定义匿名卷")]),e._v(" "),s("p",[e._v("格式为：")]),e._v(" "),s("ul",[s("li",[s("code",[e._v('VOLUME ["<路径1>", "<路径2>"...]')])]),e._v(" "),s("li",[s("code",[e._v("VOLUME <路径>")])])]),e._v(" "),s("p",[e._v("之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 "),s("code",[e._v("Dockerfile")]),e._v(" 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("VOLUME")]),e._v(" /data\n")])])]),s("p",[e._v("这里的 "),s("code",[e._v("/data")]),e._v(" 目录就会在运行时自动挂载为匿名卷，任何向 "),s("code",[e._v("/data")]),e._v(" 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("docker run -d -v mydata:/data xxxx\n")])])]),s("p",[e._v("在这行命令中，就使用了 "),s("code",[e._v("mydata")]),e._v(" 这个命名卷挂载到了 "),s("code",[e._v("/data")]),e._v(" 这个位置，替代了 "),s("code",[e._v("Dockerfile")]),e._v(" 中定义的匿名卷的挂载配置。")]),e._v(" "),s("h3",{attrs:{id:"_12-8-expose-暴露端口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-8-expose-暴露端口"}},[e._v("#")]),e._v(" 12.8 EXPOSE 暴露端口")]),e._v(" "),s("p",[e._v("格式为 "),s("code",[e._v("EXPOSE <端口1> [<端口2>...]")]),e._v("。")]),e._v(" "),s("p",[s("code",[e._v("EXPOSE")]),e._v(" 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 "),s("code",[e._v("docker run -P")]),e._v(" 时，会自动随机映射 "),s("code",[e._v("EXPOSE")]),e._v(" 的端口。")]),e._v(" "),s("p",[e._v("此外，在早期 Docker 版本中还有一个特殊的用处。以前所有容器都运行于默认桥接网络中，因此所有容器互相之间都可以直接访问，这样存在一定的安全性问题。于是有了一个 Docker 引擎参数 "),s("code",[e._v("--icc=false")]),e._v("，当指定该参数后，容器间将默认无法互访，除非互相间使用了 "),s("code",[e._v("--links")]),e._v(" 参数的容器才可以互通，并且只有镜像中 "),s("code",[e._v("EXPOSE")]),e._v(" 所声明的端口才可以被访问。这个 "),s("code",[e._v("--icc=false")]),e._v(" 的用法，在引入了 "),s("code",[e._v("docker network")]),e._v(" 后已经基本不用了，通过自定义网络可以很轻松的实现容器间的互联与隔离。")]),e._v(" "),s("p",[e._v("要将 "),s("code",[e._v("EXPOSE")]),e._v(" 和在运行时使用 "),s("code",[e._v("-p <宿主端口>:<容器端口>")]),e._v(" 区分开来。"),s("code",[e._v("-p")]),e._v("，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 "),s("code",[e._v("EXPOSE")]),e._v(" 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。")]),e._v(" "),s("h4",{attrs:{id:"_12-9-workdir-指定工作目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-9-workdir-指定工作目录"}},[e._v("#")]),e._v(" 12.9 WORKDIR 指定工作目录")]),e._v(" "),s("p",[e._v("格式为 "),s("code",[e._v("WORKDIR <工作目录路径>")]),e._v("。")]),e._v(" "),s("p",[e._v("使用 "),s("code",[e._v("WORKDIR")]),e._v(" 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，"),s("code",[e._v("WORKDIR")]),e._v(" 会帮你建立目录。")]),e._v(" "),s("p",[e._v("之前提到一些初学者常犯的错误是把 "),s("code",[e._v("Dockerfile")]),e._v(" 等同于 Shell 脚本来书写，这种错误的理解还可能会导致出现下面这样的错误：")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" cd /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" echo "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"hello"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")]),e._v(" world.txt\n")])])]),s("p",[e._v("如果将这个 "),s("code",[e._v("Dockerfile")]),e._v(" 进行构建镜像运行后，会发现找不到 "),s("code",[e._v("/app/world.txt")]),e._v(" 文件，或者其内容不是 "),s("code",[e._v("hello")]),e._v("。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 "),s("code",[e._v("Dockerfile")]),e._v(" 中，这两行 "),s("code",[e._v("RUN")]),e._v(" 命令的执行环境根本不同，是两个完全不同的容器。这就是对 "),s("code",[e._v("Dockerfile")]),e._v(" 构建分层存储的概念不了解所导致的错误。")]),e._v(" "),s("p",[e._v("之前说过每一个 "),s("code",[e._v("RUN")]),e._v(" 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 "),s("code",[e._v("RUN cd /app")]),e._v(" 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。")]),e._v(" "),s("p",[e._v("因此如果需要改变以后各层的工作目录的位置，那么应该使用 "),s("code",[e._v("WORKDIR")]),e._v(" 指令。")]),e._v(" "),s("h3",{attrs:{id:"_12-9-user-指定当前用户"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-9-user-指定当前用户"}},[e._v("#")]),e._v(" 12.9 USER 指定当前用户")]),e._v(" "),s("p",[e._v("格式："),s("code",[e._v("USER <用户名>")])]),e._v(" "),s("p",[s("code",[e._v("USER")]),e._v(" 指令和 "),s("code",[e._v("WORKDIR")]),e._v(" 相似，都是改变环境状态并影响以后的层。"),s("code",[e._v("WORKDIR")]),e._v(" 是改变工作目录，"),s("code",[e._v("USER")]),e._v(" 则是改变之后层的执行 "),s("code",[e._v("RUN")]),e._v(", "),s("code",[e._v("CMD")]),e._v(" 以及 "),s("code",[e._v("ENTRYPOINT")]),e._v(" 这类命令的身份。")]),e._v(" "),s("p",[e._v("当然，和 "),s("code",[e._v("WORKDIR")]),e._v(" 一样，"),s("code",[e._v("USER")]),e._v(" 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" groupadd "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("r redis && useradd "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("r "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("g redis redis\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("USER")]),e._v(" redis\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"redis-server"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),s("p",[e._v("如果以 "),s("code",[e._v("root")]),e._v(" 执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服务进程，不要使用 "),s("code",[e._v("su")]),e._v(" 或者 "),s("code",[e._v("sudo")]),e._v("，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出错。建议使用 "),s("a",{attrs:{href:"https://github.com/tianon/gosu",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("gosu")]),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 建立 redis 用户，并使用 gosu 换另一个用户执行命令")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" groupadd "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("r redis && useradd "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("r "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("g redis redis\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 下载 gosu")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" wget "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("O /usr/local/bin/gosu "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64"')]),e._v(" \\\n    && chmod +x /usr/local/bin/gosu \\\n    && gosu nobody true\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 设置 CMD，并以另外的用户执行")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("CMD")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"exec"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"gosu"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"redis"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"redis-server"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),s("h3",{attrs:{id:"_12-10-healthcheck-健康检查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-10-healthcheck-健康检查"}},[e._v("#")]),e._v(" 12.10 HEALTHCHECK 健康检查")]),e._v(" "),s("p",[e._v("格式：")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("HEALTHCHECK [选项] CMD <命令>")]),e._v("：设置检查容器健康状况的命令")]),e._v(" "),s("li",[s("code",[e._v("HEALTHCHECK NONE")]),e._v("：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令")])]),e._v(" "),s("p",[s("code",[e._v("HEALTHCHECK")]),e._v(" 指令是告诉 Docker 应该如何进行判断容器的状态是否正常，这是 Docker 1.12 引入的新指令。")]),e._v(" "),s("p",[e._v("在没有 "),s("code",[e._v("HEALTHCHECK")]),e._v(" 指令前，Docker 引擎只可以通过容器内主进程是否退出来判断容器是否状态异常。很多情况下这没问题，但是如果程序进入死锁状态，或者死循环状态，应用进程并不退出，但是该容器已经无法提供服务了。在 1.12 以前，Docker 不会检测到容器的这种状态，从而不会重新调度，导致可能会有部分容器已经无法提供服务了却还在接受用户请求。")]),e._v(" "),s("p",[e._v("而自 1.12 之后，Docker 提供了 "),s("code",[e._v("HEALTHCHECK")]),e._v(" 指令，通过该指令指定一行命令，用这行命令来判断容器主进程的服务状态是否还正常，从而比较真实的反应容器实际状态。")]),e._v(" "),s("p",[e._v("当在一个镜像指定了 "),s("code",[e._v("HEALTHCHECK")]),e._v(" 指令后，用其启动容器，初始状态会为 "),s("code",[e._v("starting")]),e._v("，在 "),s("code",[e._v("HEALTHCHECK")]),e._v(" 指令检查成功后变为 "),s("code",[e._v("healthy")]),e._v("，如果连续一定次数失败，则会变为 "),s("code",[e._v("unhealthy")]),e._v("。")]),e._v(" "),s("p",[s("code",[e._v("HEALTHCHECK")]),e._v(" 支持下列选项：")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("--interval=<间隔>")]),e._v("：两次健康检查的间隔，默认为 30 秒；")]),e._v(" "),s("li",[s("code",[e._v("--timeout=<时长>")]),e._v("：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；")]),e._v(" "),s("li",[s("code",[e._v("--retries=<次数>")]),e._v("：当连续失败指定次数后，则将容器状态视为 "),s("code",[e._v("unhealthy")]),e._v("，默认 3 次。")])]),e._v(" "),s("p",[e._v("和 "),s("code",[e._v("CMD")]),e._v(", "),s("code",[e._v("ENTRYPOINT")]),e._v(" 一样，"),s("code",[e._v("HEALTHCHECK")]),e._v(" 只可以出现一次，如果写了多个，只有最后一个生效。")]),e._v(" "),s("p",[e._v("在 "),s("code",[e._v("HEALTHCHECK [选项] CMD")]),e._v(" 后面的命令，格式和 "),s("code",[e._v("ENTRYPOINT")]),e._v(" 一样，分为 "),s("code",[e._v("shell")]),e._v(" 格式，和 "),s("code",[e._v("exec")]),e._v(" 格式。命令的返回值决定了该次健康检查的成功与否："),s("code",[e._v("0")]),e._v("：成功；"),s("code",[e._v("1")]),e._v("：失败；"),s("code",[e._v("2")]),e._v("：保留，不要使用这个值。")]),e._v(" "),s("p",[e._v("假设我们有个镜像是个最简单的 Web 服务，我们希望增加健康检查来判断其 Web 服务是否在正常工作，我们可以用 "),s("code",[e._v("curl")]),e._v(" 来帮助判断，其 "),s("code",[e._v("Dockerfile")]),e._v(" 的 "),s("code",[e._v("HEALTHCHECK")]),e._v(" 可以这么写：")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" nginx\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("get update && apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("get install "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("y curl && rm "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("rf /var/lib/apt/lists/*\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("HEALTHCHECK")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("interval=5s "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("timeout=3s \\\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("CMD")]),e._v(" curl "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("fs http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("//localhost/ "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),e._v(" exit 1\n")])])]),s("p",[e._v("这里我们设置了每 5 秒检查一次（这里为了试验所以间隔非常短，实际应该相对较长），如果健康检查命令超过 3 秒没响应就视为失败，并且使用 "),s("code",[e._v("curl -fs http://localhost/ || exit 1")]),e._v(" 作为健康检查命令。")]),e._v(" "),s("p",[e._v("使用 "),s("code",[e._v("docker build")]),e._v(" 来构建这个镜像：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker build -t myweb:v1 .")]),e._v("\n")])])]),s("p",[e._v("构建好了后，我们启动一个容器：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker run -d --name web -p 80:80 myweb:v1")]),e._v("\n")])])]),s("p",[e._v("当运行该镜像后，可以通过 "),s("code",[e._v("docker container ls")]),e._v(" 看到最初的状态为 "),s("code",[e._v("(health: starting)")]),e._v("：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker container ls")]),e._v("\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                            PORTS               NAMES\n03e28eb00bd0        myweb:v1            "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"nginx -g \'daemon off"')]),e._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v(" seconds ago       Up "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" seconds "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("health: starting"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("80")]),e._v("/tcp, "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("443")]),e._v("/tcp     web\n")])])]),s("p",[e._v("在等待几秒钟后，再次 "),s("code",[e._v("docker container ls")]),e._v("，就会看到健康状态变化为了 "),s("code",[e._v("(healthy)")]),e._v("：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker container ls")]),e._v("\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS               NAMES\n03e28eb00bd0        myweb:v1            "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"nginx -g \'daemon off"')]),e._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("18")]),e._v(" seconds ago      Up "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("16")]),e._v(" seconds "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("healthy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("80")]),e._v("/tcp, "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("443")]),e._v("/tcp     web\n")])])]),s("p",[e._v("如果健康检查连续失败超过了重试次数，状态就会变为 "),s("code",[e._v("(unhealthy)")]),e._v("。")]),e._v(" "),s("p",[e._v("为了帮助排障，健康检查命令的输出（包括 "),s("code",[e._v("stdout")]),e._v(" 以及 "),s("code",[e._v("stderr")]),e._v("）都会被存储于健康状态里，可以用 "),s("code",[e._v("docker inspect")]),e._v(" 来查看。")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker inspect --format '{{json .State.Health}}' web | python -m json.tool")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"FailingStreak"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(",\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Log"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"End"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"2016-11-25T14:35:37.940957051Z"')]),e._v(",\n            "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"ExitCode"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(",\n            "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Output"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"<!DOCTYPE html>'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("<html>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("<head>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("<title>Welcome to nginx!</title>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("<style>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("    body {"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("        width: 35em;"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("        margin: 0 auto;"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("        font-family: Tahoma, Verdana, Arial, sans-serif;"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("    }"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("</style>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("</head>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("<body>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("<h1>Welcome to nginx!</h1>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("<p>If you see this page, the nginx web server is successfully installed and"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("working. Further configuration is required.</p>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("<p>For online documentation and support please refer to"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("<a href="),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("http://nginx.org/"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(">nginx.org</a>.<br/>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("Commercial support is available at"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("<a href="),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("http://nginx.com/"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(">nginx.com</a>.</p>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("<p><em>Thank you for using nginx.</em></p>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("</body>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("</html>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v('"')]),e._v(",\n            "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Start"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"2016-11-25T14:35:37.780192565Z"')]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(",\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Status"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"healthy"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("h3",{attrs:{id:"_12-11-onbuild-为他人作嫁衣"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-11-onbuild-为他人作嫁衣"}},[e._v("#")]),e._v(" 12.11 ONBUILD 为他人作嫁衣")]),e._v(" "),s("p",[e._v("格式："),s("code",[e._v("ONBUILD <其它指令>")]),e._v("。")]),e._v(" "),s("p",[s("code",[e._v("ONBUILD")]),e._v(" 是一个特殊的指令，它后面跟的是其它指令，比如 "),s("code",[e._v("RUN")]),e._v(", "),s("code",[e._v("COPY")]),e._v(" 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。")]),e._v(" "),s("p",[s("code",[e._v("Dockerfile")]),e._v(" 中的其它指令都是为了定制当前镜像而准备的，唯有 "),s("code",[e._v("ONBUILD")]),e._v(" 是为了帮助别人定制自己而准备的。")]),e._v(" "),s("p",[e._v("假设我们要制作 Node.js 所写的应用的镜像。我们都知道 Node.js 使用 "),s("code",[e._v("npm")]),e._v(" 进行包管理，所有依赖、配置、启动信息等会放到 "),s("code",[e._v("package.json")]),e._v(" 文件里。在拿到程序代码后，需要先进行 "),s("code",[e._v("npm install")]),e._v(" 才可以获得所有需要的依赖。然后就可以通过 "),s("code",[e._v("npm start")]),e._v(" 来启动应用。因此，一般来说会这样写 "),s("code",[e._v("Dockerfile")]),e._v("：")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("slim\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" mkdir /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("WORKDIR")]),e._v(" /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("COPY")]),e._v(" ./package.json /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"npm"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"install"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("COPY")]),e._v(" . /app/\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("CMD")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"npm"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"start"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),s("p",[e._v("把这个 "),s("code",[e._v("Dockerfile")]),e._v(" 放到 Node.js 项目的根目录，构建好镜像后，就可以直接拿来启动容器运行。但是如果我们还有第二个 Node.js 项目也差不多呢？好吧，那就再把这个 "),s("code",[e._v("Dockerfile")]),e._v(" 复制到第二个项目里。那如果有第三个项目呢？再复制么？文件的副本越多，版本控制就越困难，让我们继续看这样的场景维护的问题。")]),e._v(" "),s("p",[e._v("如果第一个 Node.js 项目在开发过程中，发现这个 "),s("code",[e._v("Dockerfile")]),e._v(" 里存在问题，比如敲错字了、或者需要安装额外的包，然后开发人员修复了这个 "),s("code",[e._v("Dockerfile")]),e._v("，再次构建，问题解决。\b第一个项目没问题了，但是第二个项目呢？虽然最初 "),s("code",[e._v("Dockerfile")]),e._v(" 是复制、粘贴自第一个项目的，但是并不会因为第一个项目修复了他们的 "),s("code",[e._v("Dockerfile")]),e._v("，而第二个项目的 "),s("code",[e._v("Dockerfile")]),e._v(" 就会被自动修复。")]),e._v(" "),s("p",[e._v("那么我们可不可以做一个基础镜像，然后各个项目使用这个基础镜像呢？这样基础镜像更新，各个项目不用同步 "),s("code",[e._v("Dockerfile")]),e._v(" 的变化，重新构建后就继承了基础镜像的更新？好吧，可以，让我们看看这样的结果。那么上面的这个 "),s("code",[e._v("Dockerfile")]),e._v(" 就会变为：")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("slim\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" mkdir /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("WORKDIR")]),e._v(" /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("CMD")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"npm"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"start"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),s("p",[e._v("这里我们把项目相关的构建指令拿出来，放到子项目里去。假设这个基础镜像的名字为 "),s("code",[e._v("my-node")]),e._v(" 的话，各个项目内的自己的 "),s("code",[e._v("Dockerfile")]),e._v(" 就变为：")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" my"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("node\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("COPY")]),e._v(" ./package.json /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"npm"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"install"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("COPY")]),e._v(" . /app/\n")])])]),s("p",[e._v("基础镜像变化后，各个项目都用这个 "),s("code",[e._v("Dockerfile")]),e._v(" 重新构建镜像，会继承基础镜像的更新。")]),e._v(" "),s("p",[e._v("那么，问题解决了么？没有。准确说，只解决了一半。如果这个 "),s("code",[e._v("Dockerfile")]),e._v(" 里面有些东西需要调整呢？比如 "),s("code",[e._v("npm install")]),e._v(" 都需要加一些参数，那怎么办？这一行 "),s("code",[e._v("RUN")]),e._v(" 是不可能放入基础镜像的，因为涉及到了当前项目的 "),s("code",[e._v("./package.json")]),e._v("，难道又要一个个修改么？所以说，这样制作基础镜像，只解决了原来的 "),s("code",[e._v("Dockerfile")]),e._v(" 的前4条指令的变化问题，而后面三条指令的变化则完全没办法处理。")]),e._v(" "),s("p",[s("code",[e._v("ONBUILD")]),e._v(" 可以解决这个问题。让我们用 "),s("code",[e._v("ONBUILD")]),e._v(" 重新写一下基础镜像的 "),s("code",[e._v("Dockerfile")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("slim\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" mkdir /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("WORKDIR")]),e._v(" /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ONBUILD")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("COPY")]),e._v(" ./package.json /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ONBUILD")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"npm"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"install"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ONBUILD")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("COPY")]),e._v(" . /app/\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("CMD")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"npm"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"start"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),s("p",[e._v("这次我们回到原始的 "),s("code",[e._v("Dockerfile")]),e._v("，但是这次将项目相关的指令加上 "),s("code",[e._v("ONBUILD")]),e._v("，这样在构建基础镜像的时候，这三行并不会被执行。然后各个项目的 "),s("code",[e._v("Dockerfile")]),e._v(" 就变成了简单地：")]),e._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" my"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("node\n")])])]),s("p",[e._v("是的，只有这么一行。当在各个项目目录中，用这个只有一行的 "),s("code",[e._v("Dockerfile")]),e._v(" 构建镜像时，之前基础镜像的那三行 "),s("code",[e._v("ONBUILD")]),e._v(" 就会开始执行，成功的将当前项目的代码复制进镜像、并且针对本项目执行 "),s("code",[e._v("npm install")]),e._v("，生成应用镜像。")])])}),[],!1,null,null,null);t.default=r.exports}}]);